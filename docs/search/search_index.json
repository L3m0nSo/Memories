{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Daptin The most powerful ready to use data and services API server. - User management - Sign up and sign in (1fa/2fa with password/TOTP) - Extensive authorization control table level/action level and row level - Rate limiting/connection throttling at IP/API level - Data management - Declarative schema definition, relations and column properties - CRUD APIs with Authorization/Pagination/Search/Relations - File asset columns to store images/video/audio/blobs - Storage management - localhost/gDrive/S3/B2/DropBox/FTP and many more supported - Site management - Create HTTP sites based by storage anywhere - Enable HTTPS using LetsEncrypt - Create and Build HUGO static sites - Expose directories as FTP sites - Integration and action management - Create workflows and expose as APIs - Call any 3rd party API by importing OpenAPI Spec - Mail management - Enable SMTPS and IMAPS services and use daptin as your regular email provider - Multi hostname mail server - Multiple email accounts - With a clean white-branded dashboard Features Consume the following features easily on any device Database backed persistence, 3NF normalized tables JSON API / GraphQL for CRUD apis User and group management and access control Social login with OAuth : tested with google, github, linkedin Actions for abstracting out business flows Extensive state tracking APIs Enable Data Auditing from a single toggle Synchronous Data Exchange with 3rd party APIs Multilingual tables support, supports Accept-Language header Cloud storage sync like gdrive, dropbox, b2, s3 and more Asset column to hold file and blob data, backed by storage Multiple websites under separate sub-domain/sub-paths Connect with external APIs by using extension points Data View Streams Flexible data import (auto create new tables and automated schema generation) XLSX JSON CSV Database to have consistent single source of truth [Postgres/MySQL/SQLite] Flexible auth using the JWT-based authentication & permission system Works with all frontend frameworks like React, Vue.js, Angular, Android, iOS Very low memory requirement and horizontally scalable Can be deployed on a wide range of hardware arm5,arm6,arm7,arm64,mips,mips64,mips64le,mipsle (or build for your target using go) Guides Create a site using a google drive folder Creating a todo list backend","title":"About"},{"location":"#daptin","text":"The most powerful ready to use data and services API server. - User management - Sign up and sign in (1fa/2fa with password/TOTP) - Extensive authorization control table level/action level and row level - Rate limiting/connection throttling at IP/API level - Data management - Declarative schema definition, relations and column properties - CRUD APIs with Authorization/Pagination/Search/Relations - File asset columns to store images/video/audio/blobs - Storage management - localhost/gDrive/S3/B2/DropBox/FTP and many more supported - Site management - Create HTTP sites based by storage anywhere - Enable HTTPS using LetsEncrypt - Create and Build HUGO static sites - Expose directories as FTP sites - Integration and action management - Create workflows and expose as APIs - Call any 3rd party API by importing OpenAPI Spec - Mail management - Enable SMTPS and IMAPS services and use daptin as your regular email provider - Multi hostname mail server - Multiple email accounts - With a clean white-branded dashboard","title":"Daptin"},{"location":"#features","text":"Consume the following features easily on any device Database backed persistence, 3NF normalized tables JSON API / GraphQL for CRUD apis User and group management and access control Social login with OAuth : tested with google, github, linkedin Actions for abstracting out business flows Extensive state tracking APIs Enable Data Auditing from a single toggle Synchronous Data Exchange with 3rd party APIs Multilingual tables support, supports Accept-Language header Cloud storage sync like gdrive, dropbox, b2, s3 and more Asset column to hold file and blob data, backed by storage Multiple websites under separate sub-domain/sub-paths Connect with external APIs by using extension points Data View Streams Flexible data import (auto create new tables and automated schema generation) XLSX JSON CSV Database to have consistent single source of truth [Postgres/MySQL/SQLite] Flexible auth using the JWT-based authentication & permission system Works with all frontend frameworks like React, Vue.js, Angular, Android, iOS Very low memory requirement and horizontally scalable Can be deployed on a wide range of hardware arm5,arm6,arm7,arm64,mips,mips64,mips64le,mipsle (or build for your target using go)","title":"Features"},{"location":"#guides","text":"Create a site using a google drive folder Creating a todo list backend","title":"Guides"},{"location":"actions/actions/","text":"What are actions An action is a set of outcomes (as defined in the action schema) which is executed when action endpoint is invoked. An action can have a set of required input fields or none at all. Actions can also be built to handle callbacks/webhooks from other services (like payment gateway server to server notification). Actions can be thought of as follows: A set of inputs (key value pair, extracted from query params and request body) A set of outcomes based on the inputs What are actions and why do I need this Create/Read/Update/Delete (CRUD) APIs are only basic APIs exposed on the database, and you would rarely want to make those API available to your end user. Reasons could be multiple The end user doesn't (immediately) owe the data they create Creating a \"row\"/\"data entry\" entry doesn't signify completion of a process or a flow Usually a \"set of entities\" is to be created and not just a single entity (when you create a user, you also want to create a usergroup also and associate the user to usergroup) You could allow user to update only some fields of an entity and not all fields (eg user can change their name, but not email) Changes based on some entity (when you are going through a project, a new item should automatically belong to that project) Actions provide a powerful abstraction over the CRUD and to handle a variety of use cases. Actions can also make use of operations imported from OpenAPI Specs of other services. To quickly understand what actions are, lets see what happened when you \"signed up\" on Daptin. Take a look at how \"Sign up\" action is defined. We will go through each part of this definition An action is performed on an entity. Let's also remember that world is an entity itself. Action schema Name : signup Label : Sign up InstanceOptional : true OnType : user_account InFields : - Name : name ColumnType : label IsNullable : false - Name : email ColumnType : email IsNullable : false - Name : password ColumnType : password IsNullable : false - Name : Password Confirm ColumnName : passwordConfirm ColumnType : password IsNullable : false Validations : - ColumnName : email Tags : email - ColumnName : name Tags : required - ColumnName : password Tags : eqfield=InnerStructField[passwordConfirm],min=8 Conformations : - ColumnName : email Tags : email - ColumnName : name Tags : trim OutFields : - Type : user_account Method : POST Reference : user Attributes : name : \"~name\" email : \"~email\" password : \"~password\" confirmed : '0' - Type : usergroup Method : POST Reference : usergroup Attributes : name : \"!'Home group for ' + user.name\" - Type : user_user_id_has_usergroup_usergroup_id Method : POST Reference : user_usergroup Attributes : user_id : \"$user.reference_id\" usergroup_id : \"$usergroup.reference_id\" - Type : client.notify Method : ACTIONRESPONSE Attributes : type : success title : Success message : Signup Successful - Type : client.redirect Method : ACTIONRESPONSE Attributes : location : \"/auth/signin\" window : self Action Name Name: \"signup\", Name of the action, this should be unique for each actions. Actions are identified by this name Action Label Label: \"Sign up\", Label is for humans OnType OnType: \"user_account\", The primary type of entity on which the action happens. This is used to know where the actions should come up on the UI Action instance InstanceOptional: true, If the action requires an \"instance\" of that type on which the action is defined (more about this below). So \"Sign up\" is defined on \"user\" table, but an instance of \"user\" is not required to initiate the action. This is why the \"Sign up\" doesnt ask you to select a user (which wouldn't make sense either) Input fields InFields: []api2go.ColumnInfo This is a set of inputs which the user need to fill in to initiate that action. As we see here in case of \"Sign up\", we ask for four inputs Name Email Password Confirm password Note that the ColumnInfo structure is the same one we used to define tables . Validations Validations : [] ColumnTag Validations validate the user input and rejects if some validation fails { \"ColumnName\" : \"email\" , \"Tags\" : \"email\" } This tells that the \"email\" input should actually be an email. One of the more interesting validations is cross field check { ColumnName : \"password\" , Tags : \"eqfield=InnerStructField[passwordConfirm],min=8\" , } , This tells that the value entered by user in the password field should be equal to the value in passwordConfirm field. And the minimum length should be 8 characters. Conformations Conformations: []ColumnTag Conformations help to clean the data before the action is carried out. The frequently one used are trim and email . Trim: trim removes white spaces, which are sometimes accidently introduced when entering data Email: email conformation will normalize the email. Things like lowercase + trim OutFields OutFields: []Outcome OutFields are the list of outcomes which the action will result in. The outcomes are evaluated in a top to bottom manner, and the result of one outcome is accessible when evaluating the next outcome. We have defined three outcomes in our \"Sign Up\" action. Create a user { Type : \"user_account\" , Method : \"POST\" , Reference : \"user\" , Attributes : map [ string ] interface {}{ \"name\" : \"~name\" , \"email\" : \"~email\" , \"password\" : \"~password\" , \"confirmed\" : \"0\" , } , } , This tells us that, the first outcome is of type \"user\". The outcome is a \"New User\" (POST). It could alternatively have been a Update/Find/Delete operation. The attributes maps the input fields to the fields of our new user. ~name will be the value entered by user in the name field ~email will be the entered in the email field, and so on If we skip the ~ , like \"confirmed\": \"0\" Then the literal value is used. Reference: \"user\", We have this to allow the \"outcome\" to be referenced when evaluating the next outcome. Let us see the other outcomes JavaScript in fields - \"!...\" { Type : \"usergroup\" , Method : \"POST\" , Reference : \"usergroup\" , Attributes : map [ string ] interface {}{ \"name\" : \"!'Home group for ' + user.name\" , } , } , Daptin embeds the otto js engine . An exclamation mark sets to evaluate the rest of the string as Javascript. 'Home group for ' + user.name becomes \"Home group for parth\" Referencing previous outcomes { Type : \"user_user_id_has_usergroup_usergroup_id\" , Method : \"POST\" , Reference : \"user_usergroup\" , Attributes : map [ string ] interface {}{ \"user_id\" : \"$user.reference_id\" , \"usergroup_id\" : \"$usergroup.reference_id\" , } , } , the $ sign is to refer the reference variables. Here this outcome adds the newly created user to the newly created usergroup.","title":"What are actions"},{"location":"actions/actions/#what-are-actions","text":"An action is a set of outcomes (as defined in the action schema) which is executed when action endpoint is invoked. An action can have a set of required input fields or none at all. Actions can also be built to handle callbacks/webhooks from other services (like payment gateway server to server notification). Actions can be thought of as follows: A set of inputs (key value pair, extracted from query params and request body) A set of outcomes based on the inputs","title":"What are actions"},{"location":"actions/actions/#what-are-actions-and-why-do-i-need-this","text":"Create/Read/Update/Delete (CRUD) APIs are only basic APIs exposed on the database, and you would rarely want to make those API available to your end user. Reasons could be multiple The end user doesn't (immediately) owe the data they create Creating a \"row\"/\"data entry\" entry doesn't signify completion of a process or a flow Usually a \"set of entities\" is to be created and not just a single entity (when you create a user, you also want to create a usergroup also and associate the user to usergroup) You could allow user to update only some fields of an entity and not all fields (eg user can change their name, but not email) Changes based on some entity (when you are going through a project, a new item should automatically belong to that project) Actions provide a powerful abstraction over the CRUD and to handle a variety of use cases. Actions can also make use of operations imported from OpenAPI Specs of other services. To quickly understand what actions are, lets see what happened when you \"signed up\" on Daptin. Take a look at how \"Sign up\" action is defined. We will go through each part of this definition An action is performed on an entity. Let's also remember that world is an entity itself.","title":"What are actions and why do I need this"},{"location":"actions/actions/#action-schema","text":"Name : signup Label : Sign up InstanceOptional : true OnType : user_account InFields : - Name : name ColumnType : label IsNullable : false - Name : email ColumnType : email IsNullable : false - Name : password ColumnType : password IsNullable : false - Name : Password Confirm ColumnName : passwordConfirm ColumnType : password IsNullable : false Validations : - ColumnName : email Tags : email - ColumnName : name Tags : required - ColumnName : password Tags : eqfield=InnerStructField[passwordConfirm],min=8 Conformations : - ColumnName : email Tags : email - ColumnName : name Tags : trim OutFields : - Type : user_account Method : POST Reference : user Attributes : name : \"~name\" email : \"~email\" password : \"~password\" confirmed : '0' - Type : usergroup Method : POST Reference : usergroup Attributes : name : \"!'Home group for ' + user.name\" - Type : user_user_id_has_usergroup_usergroup_id Method : POST Reference : user_usergroup Attributes : user_id : \"$user.reference_id\" usergroup_id : \"$usergroup.reference_id\" - Type : client.notify Method : ACTIONRESPONSE Attributes : type : success title : Success message : Signup Successful - Type : client.redirect Method : ACTIONRESPONSE Attributes : location : \"/auth/signin\" window : self","title":"Action schema"},{"location":"actions/actions/#action-name","text":"Name: \"signup\", Name of the action, this should be unique for each actions. Actions are identified by this name","title":"Action Name"},{"location":"actions/actions/#action-label","text":"Label: \"Sign up\", Label is for humans","title":"Action Label"},{"location":"actions/actions/#ontype","text":"OnType: \"user_account\", The primary type of entity on which the action happens. This is used to know where the actions should come up on the UI","title":"OnType"},{"location":"actions/actions/#action-instance","text":"InstanceOptional: true, If the action requires an \"instance\" of that type on which the action is defined (more about this below). So \"Sign up\" is defined on \"user\" table, but an instance of \"user\" is not required to initiate the action. This is why the \"Sign up\" doesnt ask you to select a user (which wouldn't make sense either)","title":"Action instance"},{"location":"actions/actions/#input-fields","text":"InFields: []api2go.ColumnInfo This is a set of inputs which the user need to fill in to initiate that action. As we see here in case of \"Sign up\", we ask for four inputs Name Email Password Confirm password Note that the ColumnInfo structure is the same one we used to define tables .","title":"Input fields"},{"location":"actions/actions/#validations","text":"Validations : [] ColumnTag Validations validate the user input and rejects if some validation fails { \"ColumnName\" : \"email\" , \"Tags\" : \"email\" } This tells that the \"email\" input should actually be an email. One of the more interesting validations is cross field check { ColumnName : \"password\" , Tags : \"eqfield=InnerStructField[passwordConfirm],min=8\" , } , This tells that the value entered by user in the password field should be equal to the value in passwordConfirm field. And the minimum length should be 8 characters.","title":"Validations"},{"location":"actions/actions/#conformations","text":"Conformations: []ColumnTag Conformations help to clean the data before the action is carried out. The frequently one used are trim and email . Trim: trim removes white spaces, which are sometimes accidently introduced when entering data Email: email conformation will normalize the email. Things like lowercase + trim","title":"Conformations"},{"location":"actions/actions/#outfields","text":"OutFields: []Outcome OutFields are the list of outcomes which the action will result in. The outcomes are evaluated in a top to bottom manner, and the result of one outcome is accessible when evaluating the next outcome. We have defined three outcomes in our \"Sign Up\" action. Create a user { Type : \"user_account\" , Method : \"POST\" , Reference : \"user\" , Attributes : map [ string ] interface {}{ \"name\" : \"~name\" , \"email\" : \"~email\" , \"password\" : \"~password\" , \"confirmed\" : \"0\" , } , } , This tells us that, the first outcome is of type \"user\". The outcome is a \"New User\" (POST). It could alternatively have been a Update/Find/Delete operation. The attributes maps the input fields to the fields of our new user. ~name will be the value entered by user in the name field ~email will be the entered in the email field, and so on If we skip the ~ , like \"confirmed\": \"0\" Then the literal value is used. Reference: \"user\", We have this to allow the \"outcome\" to be referenced when evaluating the next outcome. Let us see the other outcomes","title":"OutFields"},{"location":"actions/actions/#javascript-in-fields-","text":"{ Type : \"usergroup\" , Method : \"POST\" , Reference : \"usergroup\" , Attributes : map [ string ] interface {}{ \"name\" : \"!'Home group for ' + user.name\" , } , } , Daptin embeds the otto js engine . An exclamation mark sets to evaluate the rest of the string as Javascript. 'Home group for ' + user.name becomes \"Home group for parth\"","title":"JavaScript in fields - \"!...\""},{"location":"actions/actions/#referencing-previous-outcomes","text":"{ Type : \"user_user_id_has_usergroup_usergroup_id\" , Method : \"POST\" , Reference : \"user_usergroup\" , Attributes : map [ string ] interface {}{ \"user_id\" : \"$user.reference_id\" , \"usergroup_id\" : \"$usergroup.reference_id\" , } , } , the $ sign is to refer the reference variables. Here this outcome adds the newly created user to the newly created usergroup.","title":"Referencing previous outcomes"},{"location":"actions/default_actions/","text":"Actions list Use actions to build work flows to carry out tasks like syncing data or emailing your users. You can also give access to these workflows to your users and restrict their access by altering their permission . The following actions are available by default on a fresh instance. These actions cannot be deleted and will be recreated if deleted directly from the database. Actions can use certain inbuilt methods to perform wide variety of operations. Default actions Restart daptin Restarts daptin immediately and reads file system for new config and data files and apply updates to the APIs as necessary. Takes about 15 seconds (async) to reconfigure everything. var request = require('request'); var headers = { 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFydHBhcjFAZ21haWwuY29tIiwiZXhwIjoxNTIzMTgzMTA0LCJpYXQiOiIyMDE4LTA0LTA1VDE1OjU1OjA0LjYyMzU4NTYxKzA1OjMwIiwiaXNzIjoiZGFwdGluIiwianRpIjoiNmJhMmFhZjgtODBlNS00OGIwLTgwZmItMzEzYzk3Nzg0Y2E4IiwibmFtZSI6InBhcnRoIiwibmJmIjoxNTIyOTIzOTA0LCJwaWN0dXJlIjoiaHR0cHM6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci9mNGJmNmI2Nzg5NGU5MzAzYjZlMTczMTMyZWE0ZTkwYVx1MDAyNmQ9bW9uc3RlcmlkIn0.eb5Vp00cHLeshZBtwJIyarJ6RQOLeVPj15n8ubVnGYo' }; var dataString = '{\"attributes\":{}}'; var options = { url: 'http://localhost:6336/action/world/restart_daptin', method: 'POST', headers: headers, body: dataString }; function callback(error, response, body) { if (!error && response.statusCode == 200) { console.log(body); } } request(options, callback); Generate random data Generate random data of any entity type to play around. Takes in a count parameter and generates that many rows. Daptin uses a fake data generator to generate quality random data for a wide variety of fields. var request = require('request'); var headers = { 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFydHBhcjFAZ21haWwuY29tIiwiZXhwIjoxNTIzMTgzMTA0LCJpYXQiOiIyMDE4LTA0LTA1VDE1OjU1OjA0LjYyMzU4NTYxKzA1OjMwIiwiaXNzIjoiZGFwdGluIiwianRpIjoiNmJhMmFhZjgtODBlNS00OGIwLTgwZmItMzEzYzk3Nzg0Y2E4IiwibmFtZSI6InBhcnRoIiwibmJmIjoxNTIyOTIzOTA0LCJwaWN0dXJlIjoiaHR0cHM6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci9mNGJmNmI2Nzg5NGU5MzAzYjZlMTczMTMyZWE0ZTkwYVx1MDAyNmQ9bW9uc3RlcmlkIn0.eb5Vp00cHLeshZBtwJIyarJ6RQOLeVPj15n8ubVnGYo', }; var dataString = '{\"attributes\":{\"count\":100,\"world_id\":\"a82bcd84-db3a-4542-b0ef-80e81fc62f8e\"}}'; var options = { url: 'http://localhost:6336/action/world/generate_random_data', method: 'POST', headers: headers, body: dataString }; function callback(error, response, body) { if (!error && response.statusCode == 200) { console.log(body); } } request(options, callback); Export data Export data as JSON dump. This will export for a single table if table_name param is specific, else it will export all data. Import data Import data from dump exported by Daptin. Takes in the following parameters: dump_file - json|yaml|toml|hcl truncate_before_insert: default false , specify true to tuncate tables before importing Upload file to a cloud store Upload file to external store cloud_store , may require oauth token and connection . file: any Upload XLS Upload xls to entity, takes in the following parameters: data_xls_file: xls, xlsx entity_name: existing table name or new to create a new entity create_if_not_exists: set true if creating a new entity (to avoid typo errors in above) add_missing_columns: set true if the file has extra columns which you want to be created Upload CSV Upload CSV to entity data_xls_file: xls, xlsx entity_name: existing table name or new to create a new entity create_if_not_exists: set true if creating a new entity (to avoid typo errors in above) add_missing_columns: set true if the file has extra columns which you want to be created Curl curl 'http://localhost:6336/action/world/upload_csv_to_system_schema' \\ -H 'Authorization: Bearer <Token>' \\ --data-binary '{ \"attributes\": { \"create_if_not_exists\": true, \"add_missing_columns\": true, \"data_csv_file\": [{ \"name\": \"<file name>.csv\", \"file\": \"data:text/csv;base64,<File contents base64 here>\", \"type\": \"text/csv\" }], \"entity_name\": \"<entity name>\" } }' NodeJS Example import requests headers = { 'Authorization': 'Bearer <Token>', } data = '{ \"attributes\": { \"create_if_not_exists\": true, \"add_missing_columns\": true, \"data_csv_file\": [{ \"name\": \"<file name>.csv\", \"file\": \"data:text/csv;base64,<File contents base64 here>\", \"type\": \"text/csv\" }], \"entity_name\": \"<entity name>\" } }' response = requests.post('http://localhost:6336/action/world/upload_csv_to_system_schema', headers=headers, data=data) Upload schema Upload entity types or actions or any other config to daptin schema_file: json|yaml|toml|hcl restart, system_json_schema_update Download Schema Download a JSON config of the current daptin instance. This can be imported at a later stage to recreate a similar instance. Note, this contains only the structure and not the actual data. You can take a data dump separately. Or of a particular entity type Become administrator Become an admin user of the instance. Only the first user can do this, as long as there is no second user. Sign up Sign up a new user, takes in the following parameters name email password passwordConfirm Creates these rows : a new user a new usergroup for the user user belongs to the usergroup Sign in Sign in essentially generates a [JWT token] issued by Daptin which can be used in requests to authenticate as a user. email password Oauth login Authenticate via OAuth, this will redirect you to the oauth sign in page of the oauth connection. The response will be handeled by oauth login response Oauth login response This action is supposed to handle the oauth login response flow and not supposed to be invoked manually. Takes in the following parameters (standard oauth2 params) - code - state - authenticator Creates : oauth profile exchange: generate a token from oauth provider stores the oauth token + refresh token for later user Add data exchange Add new data sync with google-sheets name sheet_id app_key Creates a data exchange List of inbuilt methods These methods can be used in actions Method Identifier Method Inputs Description __become_admin User auth token is required tries to make the caller the administrator of the instance cloudstore.file.delete cloudstore id and path delete a file at a path in cloud store cloudstore.file.upload cloudstore id, path and file blob upload a file at a path in cloud store cloudstore.folder.create cloudstore id and path create a folder at a path in cloud store cloudstore.path.move cloudstore id, old path and new path move a file/folder or rename path in a cloud store cloudstore.site.create cloudstore id, site hostname and path on cloudstoure to host create a new hugo/static site at a path in a cloud store column.storage.sync table id and column name sync all changes to the asset column store with cloud store provider __upload_csv_file_to_entity csv file and target entity name upload data from CSV file to a table world.column.delete table id and column name delete a column in a table world.delete table id delete a table __download_cms_config no inputs exports the internal config as JSON, should never be accessible to public __enable_graphql no inputs enable the graphql endpoint by setting config to true , should never be accessible to public __csv_data_export table id export data from a table as csv, should never be accessible to public __data_export table id export data from a table as json, should never be accessible to public acme.tls.generate site id generate a certificate for a site from LetsEncrypt jwt.token email and password of the user account generates a JWT token valid for 4 days (configurable) oauth.token oauth token id returns the access token for the stored oauth token password.reset.begin email id start password reset process by sending a password reset email to user from the configured mail server password.reset.verify email id, token, new password verify password reset and let the user set a new password if token is valid generate.random.data table id generate N rows fit for table, random data generated for each field self.tls.generate site id create a self-generated SSL certificate for HTTPS enabled sites cloud_store.files.import table id, cloudstore id, path import files from a cloud store to a table __data_import file dump import data from JSON/YAML dump direct to database integration.install integration id Import all operations defined in the integration spec as actions mail.servers.sync no input synchronise mail server interface response.create response_type create a custom response to be returned $network.request Headers,Query,Body call an external API oauth.client.redirect authenticator send the user to the 3rd party oauth login page oauth.login.response authenticator, state, user id handle the response code from 3rd party login oauth.profile.exchange authenticator, profileUrl, token exchange the token from 3rd party oauth service for the user profile otp.generate email/mobile generate a TOTP for the account (can be sent via SMS/EMAIL) otp.login.verify email/mobile and otp code verify a TOTP code presented by the user, generate a JWT token if valid world.column.rename table id, column name, new column name try to rename a table column __restart no input reload all configurations and settings (after changes in config/site/cloudstore etc) site.file.get site id, file path get file contents at the certain path site.file.list site id, path get list of contents of a folder site.storage.sync site id sync down all changes from the storage provider __upload_xlsx_file_to_entity xlsx file, table id import XLS and insert rows into a table","title":"Actions list"},{"location":"actions/default_actions/#actions-list","text":"Use actions to build work flows to carry out tasks like syncing data or emailing your users. You can also give access to these workflows to your users and restrict their access by altering their permission . The following actions are available by default on a fresh instance. These actions cannot be deleted and will be recreated if deleted directly from the database. Actions can use certain inbuilt methods to perform wide variety of operations.","title":"Actions list"},{"location":"actions/default_actions/#default-actions","text":"","title":"Default actions"},{"location":"actions/default_actions/#restart-daptin","text":"Restarts daptin immediately and reads file system for new config and data files and apply updates to the APIs as necessary. Takes about 15 seconds (async) to reconfigure everything. var request = require('request'); var headers = { 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFydHBhcjFAZ21haWwuY29tIiwiZXhwIjoxNTIzMTgzMTA0LCJpYXQiOiIyMDE4LTA0LTA1VDE1OjU1OjA0LjYyMzU4NTYxKzA1OjMwIiwiaXNzIjoiZGFwdGluIiwianRpIjoiNmJhMmFhZjgtODBlNS00OGIwLTgwZmItMzEzYzk3Nzg0Y2E4IiwibmFtZSI6InBhcnRoIiwibmJmIjoxNTIyOTIzOTA0LCJwaWN0dXJlIjoiaHR0cHM6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci9mNGJmNmI2Nzg5NGU5MzAzYjZlMTczMTMyZWE0ZTkwYVx1MDAyNmQ9bW9uc3RlcmlkIn0.eb5Vp00cHLeshZBtwJIyarJ6RQOLeVPj15n8ubVnGYo' }; var dataString = '{\"attributes\":{}}'; var options = { url: 'http://localhost:6336/action/world/restart_daptin', method: 'POST', headers: headers, body: dataString }; function callback(error, response, body) { if (!error && response.statusCode == 200) { console.log(body); } } request(options, callback);","title":"Restart daptin"},{"location":"actions/default_actions/#generate-random-data","text":"Generate random data of any entity type to play around. Takes in a count parameter and generates that many rows. Daptin uses a fake data generator to generate quality random data for a wide variety of fields. var request = require('request'); var headers = { 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFydHBhcjFAZ21haWwuY29tIiwiZXhwIjoxNTIzMTgzMTA0LCJpYXQiOiIyMDE4LTA0LTA1VDE1OjU1OjA0LjYyMzU4NTYxKzA1OjMwIiwiaXNzIjoiZGFwdGluIiwianRpIjoiNmJhMmFhZjgtODBlNS00OGIwLTgwZmItMzEzYzk3Nzg0Y2E4IiwibmFtZSI6InBhcnRoIiwibmJmIjoxNTIyOTIzOTA0LCJwaWN0dXJlIjoiaHR0cHM6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci9mNGJmNmI2Nzg5NGU5MzAzYjZlMTczMTMyZWE0ZTkwYVx1MDAyNmQ9bW9uc3RlcmlkIn0.eb5Vp00cHLeshZBtwJIyarJ6RQOLeVPj15n8ubVnGYo', }; var dataString = '{\"attributes\":{\"count\":100,\"world_id\":\"a82bcd84-db3a-4542-b0ef-80e81fc62f8e\"}}'; var options = { url: 'http://localhost:6336/action/world/generate_random_data', method: 'POST', headers: headers, body: dataString }; function callback(error, response, body) { if (!error && response.statusCode == 200) { console.log(body); } } request(options, callback);","title":"Generate random data"},{"location":"actions/default_actions/#export-data","text":"Export data as JSON dump. This will export for a single table if table_name param is specific, else it will export all data.","title":"Export data"},{"location":"actions/default_actions/#import-data","text":"Import data from dump exported by Daptin. Takes in the following parameters: dump_file - json|yaml|toml|hcl truncate_before_insert: default false , specify true to tuncate tables before importing","title":"Import data"},{"location":"actions/default_actions/#upload-file-to-a-cloud-store","text":"Upload file to external store cloud_store , may require oauth token and connection . file: any","title":"Upload file to a cloud store"},{"location":"actions/default_actions/#upload-xls","text":"Upload xls to entity, takes in the following parameters: data_xls_file: xls, xlsx entity_name: existing table name or new to create a new entity create_if_not_exists: set true if creating a new entity (to avoid typo errors in above) add_missing_columns: set true if the file has extra columns which you want to be created","title":"Upload XLS"},{"location":"actions/default_actions/#upload-csv","text":"Upload CSV to entity data_xls_file: xls, xlsx entity_name: existing table name or new to create a new entity create_if_not_exists: set true if creating a new entity (to avoid typo errors in above) add_missing_columns: set true if the file has extra columns which you want to be created Curl curl 'http://localhost:6336/action/world/upload_csv_to_system_schema' \\ -H 'Authorization: Bearer <Token>' \\ --data-binary '{ \"attributes\": { \"create_if_not_exists\": true, \"add_missing_columns\": true, \"data_csv_file\": [{ \"name\": \"<file name>.csv\", \"file\": \"data:text/csv;base64,<File contents base64 here>\", \"type\": \"text/csv\" }], \"entity_name\": \"<entity name>\" } }' NodeJS Example import requests headers = { 'Authorization': 'Bearer <Token>', } data = '{ \"attributes\": { \"create_if_not_exists\": true, \"add_missing_columns\": true, \"data_csv_file\": [{ \"name\": \"<file name>.csv\", \"file\": \"data:text/csv;base64,<File contents base64 here>\", \"type\": \"text/csv\" }], \"entity_name\": \"<entity name>\" } }' response = requests.post('http://localhost:6336/action/world/upload_csv_to_system_schema', headers=headers, data=data)","title":"Upload CSV"},{"location":"actions/default_actions/#upload-schema","text":"Upload entity types or actions or any other config to daptin schema_file: json|yaml|toml|hcl restart, system_json_schema_update","title":"Upload schema"},{"location":"actions/default_actions/#download-schema","text":"Download a JSON config of the current daptin instance. This can be imported at a later stage to recreate a similar instance. Note, this contains only the structure and not the actual data. You can take a data dump separately. Or of a particular entity type","title":"Download Schema"},{"location":"actions/default_actions/#become-administrator","text":"Become an admin user of the instance. Only the first user can do this, as long as there is no second user.","title":"Become administrator"},{"location":"actions/default_actions/#sign-up","text":"Sign up a new user, takes in the following parameters name email password passwordConfirm Creates these rows : a new user a new usergroup for the user user belongs to the usergroup","title":"Sign up"},{"location":"actions/default_actions/#sign-in","text":"Sign in essentially generates a [JWT token] issued by Daptin which can be used in requests to authenticate as a user. email password","title":"Sign in"},{"location":"actions/default_actions/#oauth-login","text":"Authenticate via OAuth, this will redirect you to the oauth sign in page of the oauth connection. The response will be handeled by oauth login response","title":"Oauth login"},{"location":"actions/default_actions/#oauth-login-response","text":"This action is supposed to handle the oauth login response flow and not supposed to be invoked manually. Takes in the following parameters (standard oauth2 params) - code - state - authenticator Creates : oauth profile exchange: generate a token from oauth provider stores the oauth token + refresh token for later user","title":"Oauth login response"},{"location":"actions/default_actions/#add-data-exchange","text":"Add new data sync with google-sheets name sheet_id app_key Creates a data exchange","title":"Add data exchange"},{"location":"actions/default_actions/#list-of-inbuilt-methods","text":"These methods can be used in actions Method Identifier Method Inputs Description __become_admin User auth token is required tries to make the caller the administrator of the instance cloudstore.file.delete cloudstore id and path delete a file at a path in cloud store cloudstore.file.upload cloudstore id, path and file blob upload a file at a path in cloud store cloudstore.folder.create cloudstore id and path create a folder at a path in cloud store cloudstore.path.move cloudstore id, old path and new path move a file/folder or rename path in a cloud store cloudstore.site.create cloudstore id, site hostname and path on cloudstoure to host create a new hugo/static site at a path in a cloud store column.storage.sync table id and column name sync all changes to the asset column store with cloud store provider __upload_csv_file_to_entity csv file and target entity name upload data from CSV file to a table world.column.delete table id and column name delete a column in a table world.delete table id delete a table __download_cms_config no inputs exports the internal config as JSON, should never be accessible to public __enable_graphql no inputs enable the graphql endpoint by setting config to true , should never be accessible to public __csv_data_export table id export data from a table as csv, should never be accessible to public __data_export table id export data from a table as json, should never be accessible to public acme.tls.generate site id generate a certificate for a site from LetsEncrypt jwt.token email and password of the user account generates a JWT token valid for 4 days (configurable) oauth.token oauth token id returns the access token for the stored oauth token password.reset.begin email id start password reset process by sending a password reset email to user from the configured mail server password.reset.verify email id, token, new password verify password reset and let the user set a new password if token is valid generate.random.data table id generate N rows fit for table, random data generated for each field self.tls.generate site id create a self-generated SSL certificate for HTTPS enabled sites cloud_store.files.import table id, cloudstore id, path import files from a cloud store to a table __data_import file dump import data from JSON/YAML dump direct to database integration.install integration id Import all operations defined in the integration spec as actions mail.servers.sync no input synchronise mail server interface response.create response_type create a custom response to be returned $network.request Headers,Query,Body call an external API oauth.client.redirect authenticator send the user to the 3rd party oauth login page oauth.login.response authenticator, state, user id handle the response code from 3rd party login oauth.profile.exchange authenticator, profileUrl, token exchange the token from 3rd party oauth service for the user profile otp.generate email/mobile generate a TOTP for the account (can be sent via SMS/EMAIL) otp.login.verify email/mobile and otp code verify a TOTP code presented by the user, generate a JWT token if valid world.column.rename table id, column name, new column name try to rename a table column __restart no input reload all configurations and settings (after changes in config/site/cloudstore etc) site.file.get site id, file path get file contents at the certain path site.file.list site id, path get list of contents of a folder site.storage.sync site id sync down all changes from the storage provider __upload_xlsx_file_to_entity xlsx file, table id import XLS and insert rows into a table","title":"List of inbuilt methods"},{"location":"actions/examples/","text":"Examples Actions are entity dependent APIs which you want to expose which may have an outcome of events. Most basic example is the login action which generates an oauth2 token as an outcome. Use action to expose endpoints for your forms and processes. Here is an example of creating a \"/action/project/new_task\" API: New task action YAML Actions : - Name : new_task Label : New to do OnType : project InstanceOptional : true InFields : - ColumnName : description Name : Description ColumnType : label - ColumnName : schedule Name : Scheduled at ColumnType : date OutFields : - Type : todo Method : POST Attributes : schedule : \"~schedule\" title : \"~description\" project_id : \"$.reference_id\" - Type : client.notify Method : ACTIONRESPONSE Attributes : type : success message : Created new todo, taking you to it. title : Wait for it New task action JSON { \"Actions\" : [ { \"Name\" : \"new_task\" , \"Label\" : \"New to do\" , \"OnType\" : \"project\" , \"InstanceOptional\" : true , \"InFields\" : [ { \"ColumnName\" : \"description\" , \"Name\" : \"Description\" , \"ColumnType\" : \"label\" }, { \"ColumnName\" : \"schedule\" , \"Name\" : \"Scheduled at\" , \"ColumnType\" : \"date\" } ], \"OutFields\" : [ { \"Type\" : \"todo\" , \"Method\" : \"POST\" , \"Attributes\" : { \"schedule\" : \"~schedule\" , \"title\" : \"~description\" , \"project_id\" : \"$.reference_id\" } }, { \"Type\" : \"client.notify\" , \"Method\" : \"ACTIONRESPONSE\" , \"Attributes\" : { \"type\" : \"success\" , \"message\" : \"Created new todo, taking you to it.\" , \"title\" : \"Wait for it\" } } ] } ] }","title":"Examples"},{"location":"actions/examples/#examples","text":"Actions are entity dependent APIs which you want to expose which may have an outcome of events. Most basic example is the login action which generates an oauth2 token as an outcome. Use action to expose endpoints for your forms and processes. Here is an example of creating a \"/action/project/new_task\" API: New task action YAML Actions : - Name : new_task Label : New to do OnType : project InstanceOptional : true InFields : - ColumnName : description Name : Description ColumnType : label - ColumnName : schedule Name : Scheduled at ColumnType : date OutFields : - Type : todo Method : POST Attributes : schedule : \"~schedule\" title : \"~description\" project_id : \"$.reference_id\" - Type : client.notify Method : ACTIONRESPONSE Attributes : type : success message : Created new todo, taking you to it. title : Wait for it New task action JSON { \"Actions\" : [ { \"Name\" : \"new_task\" , \"Label\" : \"New to do\" , \"OnType\" : \"project\" , \"InstanceOptional\" : true , \"InFields\" : [ { \"ColumnName\" : \"description\" , \"Name\" : \"Description\" , \"ColumnType\" : \"label\" }, { \"ColumnName\" : \"schedule\" , \"Name\" : \"Scheduled at\" , \"ColumnType\" : \"date\" } ], \"OutFields\" : [ { \"Type\" : \"todo\" , \"Method\" : \"POST\" , \"Attributes\" : { \"schedule\" : \"~schedule\" , \"title\" : \"~description\" , \"project_id\" : \"$.reference_id\" } }, { \"Type\" : \"client.notify\" , \"Method\" : \"ACTIONRESPONSE\" , \"Attributes\" : { \"type\" : \"success\" , \"message\" : \"Created new todo, taking you to it.\" , \"title\" : \"Wait for it\" } } ] } ] }","title":"Examples"},{"location":"actions/outcomes/","text":"List of inbuilt outcomes An OutCome is one node in the chain of OutFields defined inside an action Database OutComes Get Get list of rows Structure: - Method : GET Type : <table_name>/ Attributes : page[\"number\"] : 1 page[\"size\"] : 10 query : \"[Query]\" filter : \"\" included_relations : relation_name, Get By Id Get a single row by reference_id Structure: - Method : GET_BY_ID Type : <table_name>/ Attributes : reference_id : <reference_id> included_relations : <reference_id> Create Create a new row Structure: - Method : POST Type : <table_name>/ Attributes : reference_id : <reference_id> ...ColumnNames : ...Values Update Update a row Structure: - Method : PUT Type : <table_name>/ Attributes : reference_id : <reference_id> ...ColumnNames : ...Values Delete Delete a row Structure: - Method : DELETE Type : <table_name>/ Attributes : reference_id : <reference_id> OpenAPI Specification OutComes Operations defined in any OpenAPI Spec uploaded can be used as an OutCome in the action Eg: Upload Stripe OpenAPI Specification to integrartion table Type : \"stripeApi\" # as defined when uploading openapi spec Method : \"<operation_id>\" Reference : operationResponseBody Attributes : # ...OperationParameters as defined in request schema ParamName : Value The response can be evaluated on later in further outcomes Attributes : response : $stripeApi.<operationNamee>.response statusCode : $stripeApi.<operationNamee>.statusCode responseBody : $operationResponseBody System outcomes System OutComes are set of independent useful functions to build a variety of workflows - Method : EXECUTE Type : $network.request SkipInResponse : true Reference : validation Attributes : Url : https://ipnpb.sandbox.paypal.com/cgi-bin/webscr Method : POST Headers : Authorization : > !'Bearer ' + token[0].access_token FormData : > !attributes['cmd'] = '_notify-validate'; attributes cloud_store.files.import - Method : EXECUTE Type : cloud_store.files.import Attributes : table_name : \"$.table_name\" integration.install - Method : EXECUTE Type : integration.install Attributes : reference_id : \"$.reference_id\" client.file.download - Method : ACTIONRESPONSE Type : client.file.download Attributes : content : \"!btoa(<file_content>)\" contentType : <content_mimee_type> message : \"!'A Message JS'\" name : \"<file_name>\" acme.tls.generate - Method : EXECUTE Type : acme.tls.generate Attributes : certificate : \"~subject\" email : \"~email\" self.tls.generate - Method : EXECUTE Type : self.tls.generate Attributes : certificate : \"~subject\" otp.generate - Method : EXECUTE Type : otp.generate Attributes : email : \"$.email\" mobile : \"~mobile_number\" otp.login.verify - Method : EXECUTE Type : otp.login.verify Attributes : mobile : \"~mobile_number\" otp : \"~otp\" otp.generate - Method : EXECUTE Type : otp.generate Attributes : email : \"~email\" mobile : \"~mobile_number\" otp.login.verify - Method : EXECUTE Type : otp.login.verify Attributes : mobile : \"~mobile_number\" otp : \"~otp\" world.column.delete - Method : EXECUTE Type : world.column.delete Attributes : column_name : \"~column_name\" world_id : \"$.reference_id\" world.delete - Method : EXECUTE Type : world.delete Attributes : world_id : \"$.reference_id\" world.column.rename - Method : EXECUTE Type : world.column.rename Attributes : column_name : \"~column_name\" new_column_name : \"~new_column_name\" world_id : \"$.reference_id\" site.storage.sync - Method : EXECUTE Type : site.storage.sync Attributes : cloud_store_id : \"$.cloud_store_id\" path : \"~path\" site_id : \"$.reference_id\" column.storage.sync - Method : EXECUTE Type : column.storage.sync Attributes : column_name : \"~column_name\" table_name : \"~table_name\" mail.servers.sync - Method : EXECUTE Type : mail.servers.sync Attributes : { } system_json_schema_update - Method : EXECUTE Type : system_json_schema_update Attributes : json_schema : '!JSON.parse( '' [{\"name\":\"empty.json\",\"file\":\"data:application/json;base64,e30K\",\"type\":\"application/json\"}] '' )' generate.random.data - Method : EXECUTE Type : generate.random.data Attributes : count : \"~count\" table_name : \"~table_name\" user_account_id : \"$user.id\" user_reference_id : \"$user.reference_id\" __data_export - Method : EXECUTE Type : __data_export Attributes : table_name : \"$.table_name\" world_reference_id : \"$.reference_id\" __csv_data_export - Method : EXECUTE Type : __csv_data_export Attributes : table_name : \"$.table_name\" world_reference_id : \"$.reference_id\" __data_import - Method : EXECUTE Type : __data_import Attributes : dump_file : \"~dump_file\" table_name : \"$.table_name\" truncate_before_insert : \"~truncate_before_insert\" user : \"~user\" world_reference_id : \"$.reference_id\" cloudstore.file.upload - Method : EXECUTE Type : cloudstore.file.upload Attributes : file : \"~file\" oauth_token_id : \"$.oauth_token_id\" path : \"~path\" root_path : \"$.root_path\" store_provider : \"$.store_provider\" cloudstore.site.create - Method : EXECUTE Type : cloudstore.site.create Attributes : cloud_store_id : \"$.reference_id\" hostname : \"~hostname\" oauth_token_id : \"$.oauth_token_id\" path : \"~path\" root_path : \"$.root_path\" site_type : \"~site_type\" store_provider : \"$.store_provider\" user_account_id : \"$user.reference_id\" cloudstore.file.delete - Method : EXECUTE Type : cloudstore.file.delete Attributes : oauth_token_id : \"$.oauth_token_id\" path : \"~path\" root_path : \"$.root_path\" store_provider : \"$.store_provider\" cloudstore.folder.create - Method : EXECUTE Type : cloudstore.folder.create Attributes : name : \"~name\" oauth_token_id : \"$.oauth_token_id\" path : \"~path\" root_path : \"$.root_path\" store_provider : \"$.store_provider\" cloudstore.path.move - Method : EXECUTE Type : cloudstore.path.move Attributes : destination : \"~destination\" oauth_token_id : \"$.oauth_token_id\" root_path : \"$.root_path\" source : \"~source\" store_provider : \"$.store_provider\" site.file.list - Method : EXECUTE Type : site.file.list Attributes : path : \"~path\" site_id : \"$.reference_id\" site.file.get - Method : EXECUTE Type : site.file.get Attributes : path : \"~path\" site_id : \"$.reference_id\" site.file.delete - Method : EXECUTE Type : site.file.delete Attributes : path : \"~path\" site_id : \"$.reference_id\" system_json_schema_update - Method : EXECUTE Type : system_json_schema_update Attributes : json_schema : \"~schema_file\" __upload_xlsx_file_to_entity - Method : EXECUTE Type : __upload_xlsx_file_to_entity Attributes : add_missing_columns : \"~add_missing_columns\" create_if_not_exists : \"~create_if_not_exists\" data_xls_file : \"~data_xls_file\" entity_name : \"~entity_name\" __upload_csv_file_to_entity - Method : EXECUTE Type : __upload_csv_file_to_entity Attributes : add_missing_columns : \"~add_missing_columns\" create_if_not_exists : \"~create_if_not_exists\" data_csv_file : \"~data_csv_file\" entity_name : \"~entity_name\" __download_cms_config - Method : EXECUTE Type : __download_cms_config Attributes : { } __become_admin - Method : EXECUTE Type : __become_admin Attributes : user : \"~user\" user_account_id : \"$user.id\" otp.generate - Method : EXECUTE Type : otp.generate Attributes : email : \"~email\" mobile : \"~mobile\" client.notify - Method : ACTIONRESPONSE Type : client.notify Attributes : message : Sign-up successful. Redirecting to sign in ### Success type : success client.redirect - Method : ACTIONRESPONSE Type : client.redirect Attributes : delay : 2000 location : \"/auth/signin\" window : self otp.generate - Method : EXECUTE Type : otp.generate Attributes : email : \"$email\" mail.send - Method : EXECUTE Type : mail.send Attributes : body : 'Your verification code is: $otp.otp' from : no-reply@localhost subject : Request for password reset to : \"~email\" otp.login.verify - Method : EXECUTE Type : otp.login.verify Attributes : email : \"~email\" otp : \"~otp\" random.generate - Method : EXECUTE Type : random.generate Attributes : type : password user_account - Method : EXECUTE Type : user_account Attributes : password : \"!newPassword.value\" reference_id : \"$user[0].reference_id\" mail.send - Method : EXECUTE Type : mail.send Attributes : body : 'Your new password is: $newPassword.value' from : no-reply@localhost subject : Request for password reset to : \"~email\" jwt.token - Method : EXECUTE Type : jwt.token Attributes : email : \"~email\" password : \"~password\" oauth.client.redirect - Method : EXECUTE Type : oauth.client.redirect Attributes : authenticator : \"$.name\" scope : \"$.scope\" oauth.login.response - Method : EXECUTE Type : oauth.login.response Attributes : authenticator : \"~authenticator\" code : \"~code\" state : \"~state\" user_account_id : \"~user.id\" user_reference_id : \"~user.reference_id\" oauth.profile.exchange - Method : EXECUTE Type : oauth.profile.exchange Attributes : authenticator : \"~authenticator\" profileUrl : \"$connection[0].profile_url\" token : \"$auth.access_token\" tokenInfoUrl : \"$connection[0].token_url\" jwt.token - Method : EXECUTE Type : jwt.token Attributes : email : \"!profile.email || profile.emailAddress\" skipPasswordCheck : true","title":"Action OutComes"},{"location":"actions/outcomes/#list-of-inbuilt-outcomes","text":"An OutCome is one node in the chain of OutFields defined inside an action","title":"List of inbuilt outcomes"},{"location":"actions/outcomes/#database-outcomes","text":"","title":"Database OutComes"},{"location":"actions/outcomes/#get","text":"Get list of rows Structure: - Method : GET Type : <table_name>/ Attributes : page[\"number\"] : 1 page[\"size\"] : 10 query : \"[Query]\" filter : \"\" included_relations : relation_name,","title":"Get"},{"location":"actions/outcomes/#get-by-id","text":"Get a single row by reference_id Structure: - Method : GET_BY_ID Type : <table_name>/ Attributes : reference_id : <reference_id> included_relations : <reference_id>","title":"Get By Id"},{"location":"actions/outcomes/#create","text":"Create a new row Structure: - Method : POST Type : <table_name>/ Attributes : reference_id : <reference_id> ...ColumnNames : ...Values","title":"Create"},{"location":"actions/outcomes/#update","text":"Update a row Structure: - Method : PUT Type : <table_name>/ Attributes : reference_id : <reference_id> ...ColumnNames : ...Values","title":"Update"},{"location":"actions/outcomes/#delete","text":"Delete a row Structure: - Method : DELETE Type : <table_name>/ Attributes : reference_id : <reference_id>","title":"Delete"},{"location":"actions/outcomes/#openapi-specification-outcomes","text":"Operations defined in any OpenAPI Spec uploaded can be used as an OutCome in the action Eg: Upload Stripe OpenAPI Specification to integrartion table Type : \"stripeApi\" # as defined when uploading openapi spec Method : \"<operation_id>\" Reference : operationResponseBody Attributes : # ...OperationParameters as defined in request schema ParamName : Value The response can be evaluated on later in further outcomes Attributes : response : $stripeApi.<operationNamee>.response statusCode : $stripeApi.<operationNamee>.statusCode responseBody : $operationResponseBody","title":"OpenAPI Specification OutComes"},{"location":"actions/outcomes/#system-outcomes","text":"System OutComes are set of independent useful functions to build a variety of workflows - Method : EXECUTE Type : $network.request SkipInResponse : true Reference : validation Attributes : Url : https://ipnpb.sandbox.paypal.com/cgi-bin/webscr Method : POST Headers : Authorization : > !'Bearer ' + token[0].access_token FormData : > !attributes['cmd'] = '_notify-validate'; attributes","title":"System outcomes"},{"location":"actions/outcomes/#cloud_storefilesimport","text":"- Method : EXECUTE Type : cloud_store.files.import Attributes : table_name : \"$.table_name\"","title":"cloud_store.files.import"},{"location":"actions/outcomes/#integrationinstall","text":"- Method : EXECUTE Type : integration.install Attributes : reference_id : \"$.reference_id\"","title":"integration.install"},{"location":"actions/outcomes/#clientfiledownload","text":"- Method : ACTIONRESPONSE Type : client.file.download Attributes : content : \"!btoa(<file_content>)\" contentType : <content_mimee_type> message : \"!'A Message JS'\" name : \"<file_name>\"","title":"client.file.download"},{"location":"actions/outcomes/#acmetlsgenerate","text":"- Method : EXECUTE Type : acme.tls.generate Attributes : certificate : \"~subject\" email : \"~email\"","title":"acme.tls.generate"},{"location":"actions/outcomes/#selftlsgenerate","text":"- Method : EXECUTE Type : self.tls.generate Attributes : certificate : \"~subject\"","title":"self.tls.generate"},{"location":"actions/outcomes/#otpgenerate","text":"- Method : EXECUTE Type : otp.generate Attributes : email : \"$.email\" mobile : \"~mobile_number\"","title":"otp.generate"},{"location":"actions/outcomes/#otploginverify","text":"- Method : EXECUTE Type : otp.login.verify Attributes : mobile : \"~mobile_number\" otp : \"~otp\"","title":"otp.login.verify"},{"location":"actions/outcomes/#otpgenerate_1","text":"- Method : EXECUTE Type : otp.generate Attributes : email : \"~email\" mobile : \"~mobile_number\"","title":"otp.generate"},{"location":"actions/outcomes/#otploginverify_1","text":"- Method : EXECUTE Type : otp.login.verify Attributes : mobile : \"~mobile_number\" otp : \"~otp\"","title":"otp.login.verify"},{"location":"actions/outcomes/#worldcolumndelete","text":"- Method : EXECUTE Type : world.column.delete Attributes : column_name : \"~column_name\" world_id : \"$.reference_id\"","title":"world.column.delete"},{"location":"actions/outcomes/#worlddelete","text":"- Method : EXECUTE Type : world.delete Attributes : world_id : \"$.reference_id\"","title":"world.delete"},{"location":"actions/outcomes/#worldcolumnrename","text":"- Method : EXECUTE Type : world.column.rename Attributes : column_name : \"~column_name\" new_column_name : \"~new_column_name\" world_id : \"$.reference_id\"","title":"world.column.rename"},{"location":"actions/outcomes/#sitestoragesync","text":"- Method : EXECUTE Type : site.storage.sync Attributes : cloud_store_id : \"$.cloud_store_id\" path : \"~path\" site_id : \"$.reference_id\"","title":"site.storage.sync"},{"location":"actions/outcomes/#columnstoragesync","text":"- Method : EXECUTE Type : column.storage.sync Attributes : column_name : \"~column_name\" table_name : \"~table_name\"","title":"column.storage.sync"},{"location":"actions/outcomes/#mailserverssync","text":"- Method : EXECUTE Type : mail.servers.sync Attributes : { }","title":"mail.servers.sync"},{"location":"actions/outcomes/#system_json_schema_update","text":"- Method : EXECUTE Type : system_json_schema_update Attributes : json_schema : '!JSON.parse( '' [{\"name\":\"empty.json\",\"file\":\"data:application/json;base64,e30K\",\"type\":\"application/json\"}] '' )'","title":"system_json_schema_update"},{"location":"actions/outcomes/#generaterandomdata","text":"- Method : EXECUTE Type : generate.random.data Attributes : count : \"~count\" table_name : \"~table_name\" user_account_id : \"$user.id\" user_reference_id : \"$user.reference_id\"","title":"generate.random.data"},{"location":"actions/outcomes/#__data_export","text":"- Method : EXECUTE Type : __data_export Attributes : table_name : \"$.table_name\" world_reference_id : \"$.reference_id\"","title":"__data_export"},{"location":"actions/outcomes/#__csv_data_export","text":"- Method : EXECUTE Type : __csv_data_export Attributes : table_name : \"$.table_name\" world_reference_id : \"$.reference_id\"","title":"__csv_data_export"},{"location":"actions/outcomes/#__data_import","text":"- Method : EXECUTE Type : __data_import Attributes : dump_file : \"~dump_file\" table_name : \"$.table_name\" truncate_before_insert : \"~truncate_before_insert\" user : \"~user\" world_reference_id : \"$.reference_id\"","title":"__data_import"},{"location":"actions/outcomes/#cloudstorefileupload","text":"- Method : EXECUTE Type : cloudstore.file.upload Attributes : file : \"~file\" oauth_token_id : \"$.oauth_token_id\" path : \"~path\" root_path : \"$.root_path\" store_provider : \"$.store_provider\"","title":"cloudstore.file.upload"},{"location":"actions/outcomes/#cloudstoresitecreate","text":"- Method : EXECUTE Type : cloudstore.site.create Attributes : cloud_store_id : \"$.reference_id\" hostname : \"~hostname\" oauth_token_id : \"$.oauth_token_id\" path : \"~path\" root_path : \"$.root_path\" site_type : \"~site_type\" store_provider : \"$.store_provider\" user_account_id : \"$user.reference_id\"","title":"cloudstore.site.create"},{"location":"actions/outcomes/#cloudstorefiledelete","text":"- Method : EXECUTE Type : cloudstore.file.delete Attributes : oauth_token_id : \"$.oauth_token_id\" path : \"~path\" root_path : \"$.root_path\" store_provider : \"$.store_provider\"","title":"cloudstore.file.delete"},{"location":"actions/outcomes/#cloudstorefoldercreate","text":"- Method : EXECUTE Type : cloudstore.folder.create Attributes : name : \"~name\" oauth_token_id : \"$.oauth_token_id\" path : \"~path\" root_path : \"$.root_path\" store_provider : \"$.store_provider\"","title":"cloudstore.folder.create"},{"location":"actions/outcomes/#cloudstorepathmove","text":"- Method : EXECUTE Type : cloudstore.path.move Attributes : destination : \"~destination\" oauth_token_id : \"$.oauth_token_id\" root_path : \"$.root_path\" source : \"~source\" store_provider : \"$.store_provider\"","title":"cloudstore.path.move"},{"location":"actions/outcomes/#sitefilelist","text":"- Method : EXECUTE Type : site.file.list Attributes : path : \"~path\" site_id : \"$.reference_id\"","title":"site.file.list"},{"location":"actions/outcomes/#sitefileget","text":"- Method : EXECUTE Type : site.file.get Attributes : path : \"~path\" site_id : \"$.reference_id\"","title":"site.file.get"},{"location":"actions/outcomes/#sitefiledelete","text":"- Method : EXECUTE Type : site.file.delete Attributes : path : \"~path\" site_id : \"$.reference_id\"","title":"site.file.delete"},{"location":"actions/outcomes/#system_json_schema_update_1","text":"- Method : EXECUTE Type : system_json_schema_update Attributes : json_schema : \"~schema_file\"","title":"system_json_schema_update"},{"location":"actions/outcomes/#__upload_xlsx_file_to_entity","text":"- Method : EXECUTE Type : __upload_xlsx_file_to_entity Attributes : add_missing_columns : \"~add_missing_columns\" create_if_not_exists : \"~create_if_not_exists\" data_xls_file : \"~data_xls_file\" entity_name : \"~entity_name\"","title":"__upload_xlsx_file_to_entity"},{"location":"actions/outcomes/#__upload_csv_file_to_entity","text":"- Method : EXECUTE Type : __upload_csv_file_to_entity Attributes : add_missing_columns : \"~add_missing_columns\" create_if_not_exists : \"~create_if_not_exists\" data_csv_file : \"~data_csv_file\" entity_name : \"~entity_name\"","title":"__upload_csv_file_to_entity"},{"location":"actions/outcomes/#__download_cms_config","text":"- Method : EXECUTE Type : __download_cms_config Attributes : { }","title":"__download_cms_config"},{"location":"actions/outcomes/#__become_admin","text":"- Method : EXECUTE Type : __become_admin Attributes : user : \"~user\" user_account_id : \"$user.id\"","title":"__become_admin"},{"location":"actions/outcomes/#otpgenerate_2","text":"- Method : EXECUTE Type : otp.generate Attributes : email : \"~email\" mobile : \"~mobile\"","title":"otp.generate"},{"location":"actions/outcomes/#clientnotify","text":"- Method : ACTIONRESPONSE Type : client.notify Attributes : message : Sign-up successful. Redirecting to sign in ### Success type : success","title":"client.notify"},{"location":"actions/outcomes/#clientredirect","text":"- Method : ACTIONRESPONSE Type : client.redirect Attributes : delay : 2000 location : \"/auth/signin\" window : self","title":"client.redirect"},{"location":"actions/outcomes/#otpgenerate_3","text":"- Method : EXECUTE Type : otp.generate Attributes : email : \"$email\"","title":"otp.generate"},{"location":"actions/outcomes/#mailsend","text":"- Method : EXECUTE Type : mail.send Attributes : body : 'Your verification code is: $otp.otp' from : no-reply@localhost subject : Request for password reset to : \"~email\"","title":"mail.send"},{"location":"actions/outcomes/#otploginverify_2","text":"- Method : EXECUTE Type : otp.login.verify Attributes : email : \"~email\" otp : \"~otp\"","title":"otp.login.verify"},{"location":"actions/outcomes/#randomgenerate","text":"- Method : EXECUTE Type : random.generate Attributes : type : password","title":"random.generate"},{"location":"actions/outcomes/#user_account","text":"- Method : EXECUTE Type : user_account Attributes : password : \"!newPassword.value\" reference_id : \"$user[0].reference_id\"","title":"user_account"},{"location":"actions/outcomes/#mailsend_1","text":"- Method : EXECUTE Type : mail.send Attributes : body : 'Your new password is: $newPassword.value' from : no-reply@localhost subject : Request for password reset to : \"~email\"","title":"mail.send"},{"location":"actions/outcomes/#jwttoken","text":"- Method : EXECUTE Type : jwt.token Attributes : email : \"~email\" password : \"~password\"","title":"jwt.token"},{"location":"actions/outcomes/#oauthclientredirect","text":"- Method : EXECUTE Type : oauth.client.redirect Attributes : authenticator : \"$.name\" scope : \"$.scope\"","title":"oauth.client.redirect"},{"location":"actions/outcomes/#oauthloginresponse","text":"- Method : EXECUTE Type : oauth.login.response Attributes : authenticator : \"~authenticator\" code : \"~code\" state : \"~state\" user_account_id : \"~user.id\" user_reference_id : \"~user.reference_id\"","title":"oauth.login.response"},{"location":"actions/outcomes/#oauthprofileexchange","text":"- Method : EXECUTE Type : oauth.profile.exchange Attributes : authenticator : \"~authenticator\" profileUrl : \"$connection[0].profile_url\" token : \"$auth.access_token\" tokenInfoUrl : \"$connection[0].token_url\"","title":"oauth.profile.exchange"},{"location":"actions/outcomes/#jwttoken_1","text":"- Method : EXECUTE Type : jwt.token Attributes : email : \"!profile.email || profile.emailAddress\" skipPasswordCheck : true","title":"jwt.token"},{"location":"apis/crud/","text":"API reference Daptin exposes various endpoints for each entity defined in the schema: Create Find one Update Delete Find all Find relations Execute action Aggregate State management All endpoints allow authentication using the Authorization Header. Read Query Parameters ?fields=col1,col2 Include values for columns col1 and col2. Skip other columns in responsee ?filter=value Filter results by searching value in indexed label columns in the table ?query=[QueryObject] QueryObject {\"column\": \"col1\", \"operator\": \"is\", \"value\": \"value 1\"} All objects are ANDed together in the query List of all operators here ?included_relations=column_name1,column_name2 Fetch associated second level row, or asset object and return as part of included objects in the response Use Name parameter type default value example value page[number] integer 1 5 page[size] integer 10 100 query json base64 [] [{\"column\": \"name\", \"operator\": \"is\", \"value\": \"england\"}] group string - [{\"column\": \"name\", \"order\": \"desc\"}] included_relations comma separated string - user post author sort comma separated string - created_at amount guest_count filter string - england Response Response example { \"links\" : { \"current_page\" : 1 , \"from\" : 0 , \"last_page\" : 1 , \"per_page\" : 10 , \"to\" : 10 , \"total\" : 1 }, \"data\" : [{ \"type\" : \"book\" , \"id\" : \"29d11cb3-3fad-4972-bf3b-9cfc6da9e6a6\" , \"attributes\" : { \"__type\" : \"book\" , \"confirmed\" : 0 , \"created_at\" : \"2018-04-05 15:47:29\" , \"title\" : \"book title\" , \"name\" : \"book name\" , \"permission\" : 127127127 , \"reference_id\" : \"29d11cb3-3fad-4972-bf3b-9cfc6da9e6a6\" , \"updated_at\" : null , \"user_id\" : \"696c98d3-3b8b-41da-a510-08e6948cf661\" }, \"relationships\" : { \"author_id\" : { \"links\" : { \"related\" : \"/api/book/<book-id/author_id\" , \"self\" : \"/api/book/<book-id>/relationships/author_id\" }, \"data\" : [] } } }] } Examples Curl example curl '/api/<entityName>?sort=&page[number]=1&page[size]=10' \\ - H 'Authorization: Bearer <AccessToken>' jQuery ajax example $ . ajax ( { method : \"GET\" , url : '/api/<entityName>?sort=&page[number]=1&page[size]=10' , success : function ( response ) { console . log ( response . data ); } } ) Node js example var request = require ( 'request' ); var headers = { 'Authorization' : 'Bearer <AccessToken>' } ; var options = { url : '/api/<entityName>?sort=&page[number]=1&page[size]=10' , headers : headers } ; function callback ( error , response , body ) { if ( ! error && response . statusCode == 200 ) { console . log ( body ); } } request ( options , callback ); Python example import requests headers = { 'Authorization' : 'Bearer <AccessToken>' , } params = ( ( 'sort' , '-created_at' ), ( 'page[number]' , '1' ), ( 'page[size]' , '10' ), ) response = requests . get ( 'http://localhost:6336/api/laptop' , headers = headers , params = params ) PHP example < ? php include ( 'vendor/rmccue/requests/library/Requests.php' ); Requests : : register_autoloader (); $ headers = array ( 'Authorization' => 'Bearer <AccessToken>' ); $ response = Requests : : get ( 'http://localhost:6336/api/laptop?sort=&page[number]=1&page[size]=10' , $ headers ); Filtering Used to search items in a table that match the filter's conditions. Filters follow the syntax query=[{\"column\": \"<column_name>\", \"operator\": \"<compare-operator>\", \"value\":\"<value>\"}] Daptin operator SQL compare operator contains like '%\\ ' not contains not like '%\\ ' is = is not != before < less then < after > more then > any of in none of not in is empty is null is not empty is not null Example curl '/api/world?query=[{\"column\": \"is_hidden\", \"operator\": \"any of\", \"value\":\"1,0\"}] \\ -H 'Authorization: Bearer <AccessToken>' Create Curl Example curl '/api/<EntityName>' -H 'Authorization: Bearer <Token>' --data-binary '{ \"data\": { \"type\": \"<EntityName>\", \"attributes\": { \"name\": \"name\" } } }' Nodejs example var request = require('request'); var headers = { 'Authorization': 'Bearer <Token>', }; var dataString = '{ \"data\": { \"type\": \"<EntityName>\", \"attributes\": { \"name\": \"name\" } } }'; var options = { url: '/api/<EntityName>', method: 'POST', headers: headers, body: dataString }; function callback(error, response, body) { if (!error && response.statusCode == 200) { console.log(body); } } request(options, callback); Python example import requests headers = { 'Authorization' : 'Bearer <Token>' , } data = '{ \"data\" : { \"type\" : \"<EntityName>\" , \"attributes\" : { \"name\" : \"name\" } } } ' response = requests . post ( '/api/<EntityName>' , headers = headers , data = data ) PHP Example <?php include ( 'vendor/rmccue/requests/library/Requests.php' ); Requests :: register_autoloader (); $headers = array ( 'Authorization' => 'Bearer <Token>' , ); $data = '{ \"data\": { \"type\": \"<EntityName>\", \"attributes\": { \"name\": \"name\" } } }' ; $response = Requests :: post ( '/api/<EntityName>' , $headers , $data ); Update Curl example curl '/api/<EntityName>/<ReferenceId>' \\ -X PATCH \\ -H 'Authorization: Bearer <Token>' \\ --data-binary '{ \"data\": { \"type\": \"<EntityName>\", \"attributes\": { \"confirmed\": false, \"email\": \"update@gmail.com\", \"name\": \"new name\", \"password\": \"\" }, \"id\": \"<ReferenceId>\" } }' Nodejs example var request = require('request'); var headers = { 'Authorization': 'Bearer <Token>' }; var dataString = '{ \"data\": { \"type\": \"<EntityName>\", \"attributes\": { \"confirmed\": false, \"email\": \"update@gmail.com\", \"name\": \"new name\", \"password\": \"\", \"permission\": 127127127, }, \"relationships\": { \"relation_name\": [ ... ] }, \"id\": \"<ReferenceId>\" } }'; var options = { url: '/api/<EntityName>/<ReferenceId>', method: 'PATCH', headers: headers, body: dataString }; function callback(error, response, body) { if (!error && response.statusCode == 200) { console.log(body); } } request(options, callback); Python example import requests headers = { 'Authorization' : 'Bearer <Token>' , } data = '{ \"data\" : { \"type\" : \"<EntityName>\" , \"attributes\" : { \"confirmed\" : false , \"email\" : \"update@gmail.com\" , \"name\" : \"new name\" , \"password\" : \"\" , \"permission\" : 127127127 , }, \"relationships\" : { \"relation_name\" : [ ... ] }, \"id\" : \"<ReferenceId>\" } } ' response = requests . patch ( '/api/<EntityName>/<ReferenceId>' , headers = headers , data = data ) PHP example <?php include ( 'vendor/rmccue/requests/library/Requests.php' ); Requests :: register_autoloader (); $headers = array ( 'Authorization' => 'Bearer <Token>' ); $data = '{ \"data\": { \"type\": \"<EntityName>\", \"attributes\": { \"confirmed\": false, \"email\": \"update@gmail.com\", \"name\": \"new name\", \"password\": \"\", \"permission\": 127127127, }, \"relationships\": { \"relation_name\": [ ... ] }, \"id\": \"<ReferenceId>\" } }' ; $response = Requests :: patch ( '/api/<EntityName>/<ReferenceId>' , $headers , $data ); Delete Delete a row from a table Curl example curl '/api/user_account/a5b9add2-ea56-4717-a785-7dee71a2ae46' -X DELETE -H 'Authorization: Bearer <Token>' Nodejs example var request = require('request'); var headers = { 'Authorization': 'Bearer <Token>' }; var options = { url: '/api/user_account/a5b9add2-ea56-4717-a785-7dee71a2ae46', method: 'DELETE', headers: headers }; function callback(error, response, body) { if (!error && response.statusCode == 200) { console.log(body); } } request(options, callback); Python example import requests headers = { 'Authorization' : 'Bearer <Token>' , } response = requests . delete ( '/api/user_account/a5b9add2-ea56-4717-a785-7dee71a2ae46' , headers = headers ) PHP example <?php include ( 'vendor/rmccue/requests/library/Requests.php' ); Requests :: register_autoloader (); $headers = array ( 'Authorization' => 'Bearer <Token>' ); $response = Requests :: delete ( '/api/user_account/a5b9add2-ea56-4717-a785-7dee71a2ae46' , $headers ); Execute Execute an action on an entity type or instance Curl example curl '/action/<EntityName>/<ActionName>' -H 'Authorization: Bearer <Token>' --data-binary '{\"attributes\":{}}' PHP Example <?php include ( 'vendor/rmccue/requests/library/Requests.php' ); Requests :: register_autoloader (); $headers = array ( 'Authorization' => 'Bearer <Token>' ); $data = '{\"attributes\":{}}' ; $response = Requests :: post ( '/action/<EntityName>/<ActionName>' , $headers , $data ); Nodejs example var request = require('request'); var headers = { 'Authorization': 'Bearer <Token>' }; var dataString = '{\"attributes\":{}}'; var options = { url: '/action/<EntityName>/<ActionName>', method: 'POST', headers: headers, body: dataString }; function callback(error, response, body) { if (!error && response.statusCode == 200) { console.log(body); } } request(options, callback); Python example import requests headers = { 'Authorization' : 'Bearer <Token>' , } data = '{\"attributes\": {} }' response = requests . post ( '/action/<EntityName>/<ActionName>' , headers = headers , data = data ) Relations curl example curl '/api/<EntityName>/<ReferenceId>/<RelationName>?sort=&page[number]=1&page[size]=10' -H 'Authorization: Bearer <Token>' php example <?php include ( 'vendor/rmccue/requests/library/Requests.php' ); Requests :: register_autoloader (); $headers = array ( 'Authorization' => 'Bearer <Token>' ); python example import requests headers = { 'Authorization' : 'Bearer <Token>' , } params = ( ( 'sort' , '' ), ( 'page/[number/]' , '1' ), ( 'page/[size/]' , '10' ), ) response = requests . get ( 'http://localhost:6336/api/user_account/696c98d3-3b8b-41da-a510-08e6948cf661/marketplace_id' , headers = headers , params = params ) #NB. Original query string below. It seems impossible to parse and #reproduce query strings 100% accurately so the one below is given #in case the reproduced version is not \"correct\". # response = requests.get('http://localhost:6336/api/user_account/696c98d3-3b8b-41da-a510-08e6948cf661/marketplace_id?sort=&page\\[number\\]=1&page\\[size\\]=10', headers=headers) nodejs example var request = require('request'); var headers = { 'Authorization': 'Bearer <Token>' }; var options = { url: '/api/<EntityName>/<ReferenceId>/<RelationName>?sort=&page[number]=1&page[size]=10', headers: headers }; function callback(error, response, body) { if (!error && response.statusCode == 200) { console.log(body); } } request(options, callback); python example import requests headers = { 'Authorization' : 'Bearer <Token>' , } params = ( ( 'sort' , '' ), ( 'page[number]' , '1' ), ( 'page[size]' , '10' ), ) response = requests . get ( '/api/<EntityName>/<ReferenceId>/<RelationName>' , headers = headers , params = params ) API Overview CRUD API Read/Create/Update/Delete GET /api/{entityName} Query Params Request Body Description GET /api/{entityName} page[size]= page[number] query filter Detailed documentation POST /api/{entityName} Find all rows, paginated with query and filters Example PATCH /api/{entityName}/{id} {\"attributes\": { ...{fields} } \"type\": \"{entityType} } Update row by reference id Example PUT /api/{entityName}/{id} {\"attributes\": { } \"type\": \"{entityType} } Update row by reference id Example DELETE /api/{entityName}/{id} Delete a row Example Action API GET /action/{entityName}/{actionName} Query Params Request Body Description POST /api/{entityName}/ action parameters Action Parameters Execute action Relation APIs Method Path Query params Request body Description GET /api/{entityName}/{id}/{relationName} page[size]= page[number] query filter Find all related rows by relation name, eg, \"posts\" of a user DELETE /api/{entityName}/{id}/{relationName} {\"id\": , \"type\": } Delete a related row, eg: delete post of a user. this only removes a relation and not the actual row. GET /action/{entityName}/{actionName} Parameters for action Invoke an action on an entity POST /action/{entityName}/{actionName} { \"attribute\": { Parameters for action }, \"id\": \"< object id >\" type: \"< entity type >\" } Invoke an action on an entity Aggregate API Method Path Query params Request body Description GET /stats/{typeName} group/filter/join/column/timestamp/timefrom/timeto/order Run aggregate function over entity table State machine APIs Enabled for the entities for which you have enabled state machines Method Path Query params Request body Description POST /track/start/{stateMachineId} { \"id\": \" < reference id >\", type: \" < entity type > \" } Start tracking according to the state machine for an object POST /track/event/{typename}/{objectStateId}/{eventName} Invoke an event on a particular track of the state machine for a object Websocket API (wip) Listed to incoming updates to data over websocket live Method Path Query params Request body Description GET /live Initiate a web socket connection Metadata API Meatadata APIs expose information about the daptin server itself Method Path Query params Request body Description GET /apispec.raml RAML Spec for all API's exposed by the current instance GET /ping Replies with PONG, Endpoint for liveness probe GET /statistics Replies with PONG, Endpoint for healht check probe","title":"Metadata API"},{"location":"apis/crud/#api-reference","text":"Daptin exposes various endpoints for each entity defined in the schema: Create Find one Update Delete Find all Find relations Execute action Aggregate State management All endpoints allow authentication using the Authorization Header.","title":"API reference"},{"location":"apis/crud/#read","text":"","title":"Read"},{"location":"apis/crud/#query-parameters","text":"","title":"Query Parameters"},{"location":"apis/crud/#fieldscol1col2","text":"Include values for columns col1 and col2. Skip other columns in responsee","title":"?fields=col1,col2"},{"location":"apis/crud/#filtervalue","text":"Filter results by searching value in indexed label columns in the table","title":"?filter=value"},{"location":"apis/crud/#queryqueryobject","text":"QueryObject {\"column\": \"col1\", \"operator\": \"is\", \"value\": \"value 1\"} All objects are ANDed together in the query List of all operators here","title":"?query=[QueryObject]"},{"location":"apis/crud/#included_relationscolumn_name1column_name2","text":"Fetch associated second level row, or asset object and return as part of included objects in the response Use Name parameter type default value example value page[number] integer 1 5 page[size] integer 10 100 query json base64 [] [{\"column\": \"name\", \"operator\": \"is\", \"value\": \"england\"}] group string - [{\"column\": \"name\", \"order\": \"desc\"}] included_relations comma separated string - user post author sort comma separated string - created_at amount guest_count filter string - england","title":"?included_relations=column_name1,column_name2"},{"location":"apis/crud/#response","text":"Response example { \"links\" : { \"current_page\" : 1 , \"from\" : 0 , \"last_page\" : 1 , \"per_page\" : 10 , \"to\" : 10 , \"total\" : 1 }, \"data\" : [{ \"type\" : \"book\" , \"id\" : \"29d11cb3-3fad-4972-bf3b-9cfc6da9e6a6\" , \"attributes\" : { \"__type\" : \"book\" , \"confirmed\" : 0 , \"created_at\" : \"2018-04-05 15:47:29\" , \"title\" : \"book title\" , \"name\" : \"book name\" , \"permission\" : 127127127 , \"reference_id\" : \"29d11cb3-3fad-4972-bf3b-9cfc6da9e6a6\" , \"updated_at\" : null , \"user_id\" : \"696c98d3-3b8b-41da-a510-08e6948cf661\" }, \"relationships\" : { \"author_id\" : { \"links\" : { \"related\" : \"/api/book/<book-id/author_id\" , \"self\" : \"/api/book/<book-id>/relationships/author_id\" }, \"data\" : [] } } }] }","title":"Response"},{"location":"apis/crud/#examples","text":"","title":"Examples"},{"location":"apis/crud/#curl-example","text":"curl '/api/<entityName>?sort=&page[number]=1&page[size]=10' \\ - H 'Authorization: Bearer <AccessToken>'","title":"Curl example"},{"location":"apis/crud/#jquery-ajax-example","text":"$ . ajax ( { method : \"GET\" , url : '/api/<entityName>?sort=&page[number]=1&page[size]=10' , success : function ( response ) { console . log ( response . data ); } } )","title":"jQuery ajax example"},{"location":"apis/crud/#node-js-example","text":"var request = require ( 'request' ); var headers = { 'Authorization' : 'Bearer <AccessToken>' } ; var options = { url : '/api/<entityName>?sort=&page[number]=1&page[size]=10' , headers : headers } ; function callback ( error , response , body ) { if ( ! error && response . statusCode == 200 ) { console . log ( body ); } } request ( options , callback );","title":"Node js example"},{"location":"apis/crud/#python-example","text":"import requests headers = { 'Authorization' : 'Bearer <AccessToken>' , } params = ( ( 'sort' , '-created_at' ), ( 'page[number]' , '1' ), ( 'page[size]' , '10' ), ) response = requests . get ( 'http://localhost:6336/api/laptop' , headers = headers , params = params )","title":"Python example"},{"location":"apis/crud/#php-example","text":"< ? php include ( 'vendor/rmccue/requests/library/Requests.php' ); Requests : : register_autoloader (); $ headers = array ( 'Authorization' => 'Bearer <AccessToken>' ); $ response = Requests : : get ( 'http://localhost:6336/api/laptop?sort=&page[number]=1&page[size]=10' , $ headers );","title":"PHP example"},{"location":"apis/crud/#filtering","text":"Used to search items in a table that match the filter's conditions. Filters follow the syntax query=[{\"column\": \"<column_name>\", \"operator\": \"<compare-operator>\", \"value\":\"<value>\"}] Daptin operator SQL compare operator contains like '%\\ ' not contains not like '%\\ ' is = is not != before < less then < after > more then > any of in none of not in is empty is null is not empty is not null","title":"Filtering"},{"location":"apis/crud/#example","text":"curl '/api/world?query=[{\"column\": \"is_hidden\", \"operator\": \"any of\", \"value\":\"1,0\"}] \\ -H 'Authorization: Bearer <AccessToken>'","title":"Example"},{"location":"apis/crud/#create","text":"Curl Example curl '/api/<EntityName>' -H 'Authorization: Bearer <Token>' --data-binary '{ \"data\": { \"type\": \"<EntityName>\", \"attributes\": { \"name\": \"name\" } } }' Nodejs example var request = require('request'); var headers = { 'Authorization': 'Bearer <Token>', }; var dataString = '{ \"data\": { \"type\": \"<EntityName>\", \"attributes\": { \"name\": \"name\" } } }'; var options = { url: '/api/<EntityName>', method: 'POST', headers: headers, body: dataString }; function callback(error, response, body) { if (!error && response.statusCode == 200) { console.log(body); } } request(options, callback); Python example import requests headers = { 'Authorization' : 'Bearer <Token>' , } data = '{ \"data\" : { \"type\" : \"<EntityName>\" , \"attributes\" : { \"name\" : \"name\" } } } ' response = requests . post ( '/api/<EntityName>' , headers = headers , data = data ) PHP Example <?php include ( 'vendor/rmccue/requests/library/Requests.php' ); Requests :: register_autoloader (); $headers = array ( 'Authorization' => 'Bearer <Token>' , ); $data = '{ \"data\": { \"type\": \"<EntityName>\", \"attributes\": { \"name\": \"name\" } } }' ; $response = Requests :: post ( '/api/<EntityName>' , $headers , $data );","title":"Create"},{"location":"apis/crud/#update","text":"Curl example curl '/api/<EntityName>/<ReferenceId>' \\ -X PATCH \\ -H 'Authorization: Bearer <Token>' \\ --data-binary '{ \"data\": { \"type\": \"<EntityName>\", \"attributes\": { \"confirmed\": false, \"email\": \"update@gmail.com\", \"name\": \"new name\", \"password\": \"\" }, \"id\": \"<ReferenceId>\" } }' Nodejs example var request = require('request'); var headers = { 'Authorization': 'Bearer <Token>' }; var dataString = '{ \"data\": { \"type\": \"<EntityName>\", \"attributes\": { \"confirmed\": false, \"email\": \"update@gmail.com\", \"name\": \"new name\", \"password\": \"\", \"permission\": 127127127, }, \"relationships\": { \"relation_name\": [ ... ] }, \"id\": \"<ReferenceId>\" } }'; var options = { url: '/api/<EntityName>/<ReferenceId>', method: 'PATCH', headers: headers, body: dataString }; function callback(error, response, body) { if (!error && response.statusCode == 200) { console.log(body); } } request(options, callback); Python example import requests headers = { 'Authorization' : 'Bearer <Token>' , } data = '{ \"data\" : { \"type\" : \"<EntityName>\" , \"attributes\" : { \"confirmed\" : false , \"email\" : \"update@gmail.com\" , \"name\" : \"new name\" , \"password\" : \"\" , \"permission\" : 127127127 , }, \"relationships\" : { \"relation_name\" : [ ... ] }, \"id\" : \"<ReferenceId>\" } } ' response = requests . patch ( '/api/<EntityName>/<ReferenceId>' , headers = headers , data = data ) PHP example <?php include ( 'vendor/rmccue/requests/library/Requests.php' ); Requests :: register_autoloader (); $headers = array ( 'Authorization' => 'Bearer <Token>' ); $data = '{ \"data\": { \"type\": \"<EntityName>\", \"attributes\": { \"confirmed\": false, \"email\": \"update@gmail.com\", \"name\": \"new name\", \"password\": \"\", \"permission\": 127127127, }, \"relationships\": { \"relation_name\": [ ... ] }, \"id\": \"<ReferenceId>\" } }' ; $response = Requests :: patch ( '/api/<EntityName>/<ReferenceId>' , $headers , $data );","title":"Update"},{"location":"apis/crud/#delete","text":"Delete a row from a table Curl example curl '/api/user_account/a5b9add2-ea56-4717-a785-7dee71a2ae46' -X DELETE -H 'Authorization: Bearer <Token>' Nodejs example var request = require('request'); var headers = { 'Authorization': 'Bearer <Token>' }; var options = { url: '/api/user_account/a5b9add2-ea56-4717-a785-7dee71a2ae46', method: 'DELETE', headers: headers }; function callback(error, response, body) { if (!error && response.statusCode == 200) { console.log(body); } } request(options, callback); Python example import requests headers = { 'Authorization' : 'Bearer <Token>' , } response = requests . delete ( '/api/user_account/a5b9add2-ea56-4717-a785-7dee71a2ae46' , headers = headers ) PHP example <?php include ( 'vendor/rmccue/requests/library/Requests.php' ); Requests :: register_autoloader (); $headers = array ( 'Authorization' => 'Bearer <Token>' ); $response = Requests :: delete ( '/api/user_account/a5b9add2-ea56-4717-a785-7dee71a2ae46' , $headers );","title":"Delete"},{"location":"apis/crud/#execute","text":"Execute an action on an entity type or instance Curl example curl '/action/<EntityName>/<ActionName>' -H 'Authorization: Bearer <Token>' --data-binary '{\"attributes\":{}}' PHP Example <?php include ( 'vendor/rmccue/requests/library/Requests.php' ); Requests :: register_autoloader (); $headers = array ( 'Authorization' => 'Bearer <Token>' ); $data = '{\"attributes\":{}}' ; $response = Requests :: post ( '/action/<EntityName>/<ActionName>' , $headers , $data ); Nodejs example var request = require('request'); var headers = { 'Authorization': 'Bearer <Token>' }; var dataString = '{\"attributes\":{}}'; var options = { url: '/action/<EntityName>/<ActionName>', method: 'POST', headers: headers, body: dataString }; function callback(error, response, body) { if (!error && response.statusCode == 200) { console.log(body); } } request(options, callback); Python example import requests headers = { 'Authorization' : 'Bearer <Token>' , } data = '{\"attributes\": {} }' response = requests . post ( '/action/<EntityName>/<ActionName>' , headers = headers , data = data )","title":"Execute"},{"location":"apis/crud/#relations","text":"curl example curl '/api/<EntityName>/<ReferenceId>/<RelationName>?sort=&page[number]=1&page[size]=10' -H 'Authorization: Bearer <Token>' php example <?php include ( 'vendor/rmccue/requests/library/Requests.php' ); Requests :: register_autoloader (); $headers = array ( 'Authorization' => 'Bearer <Token>' ); python example import requests headers = { 'Authorization' : 'Bearer <Token>' , } params = ( ( 'sort' , '' ), ( 'page/[number/]' , '1' ), ( 'page/[size/]' , '10' ), ) response = requests . get ( 'http://localhost:6336/api/user_account/696c98d3-3b8b-41da-a510-08e6948cf661/marketplace_id' , headers = headers , params = params ) #NB. Original query string below. It seems impossible to parse and #reproduce query strings 100% accurately so the one below is given #in case the reproduced version is not \"correct\". # response = requests.get('http://localhost:6336/api/user_account/696c98d3-3b8b-41da-a510-08e6948cf661/marketplace_id?sort=&page\\[number\\]=1&page\\[size\\]=10', headers=headers) nodejs example var request = require('request'); var headers = { 'Authorization': 'Bearer <Token>' }; var options = { url: '/api/<EntityName>/<ReferenceId>/<RelationName>?sort=&page[number]=1&page[size]=10', headers: headers }; function callback(error, response, body) { if (!error && response.statusCode == 200) { console.log(body); } } request(options, callback); python example import requests headers = { 'Authorization' : 'Bearer <Token>' , } params = ( ( 'sort' , '' ), ( 'page[number]' , '1' ), ( 'page[size]' , '10' ), ) response = requests . get ( '/api/<EntityName>/<ReferenceId>/<RelationName>' , headers = headers , params = params )","title":"Relations"},{"location":"apis/crud/#api-overview","text":"","title":"API Overview"},{"location":"apis/crud/#crud-api","text":"Read/Create/Update/Delete GET /api/{entityName} Query Params Request Body Description GET /api/{entityName} page[size]= page[number] query filter Detailed documentation POST /api/{entityName} Find all rows, paginated with query and filters Example PATCH /api/{entityName}/{id} {\"attributes\": { ...{fields} } \"type\": \"{entityType} } Update row by reference id Example PUT /api/{entityName}/{id} {\"attributes\": { } \"type\": \"{entityType} } Update row by reference id Example DELETE /api/{entityName}/{id} Delete a row Example","title":"CRUD API"},{"location":"apis/crud/#action-api","text":"GET /action/{entityName}/{actionName} Query Params Request Body Description POST /api/{entityName}/ action parameters Action Parameters Execute action","title":"Action API"},{"location":"apis/crud/#relation-apis","text":"Method Path Query params Request body Description GET /api/{entityName}/{id}/{relationName} page[size]= page[number] query filter Find all related rows by relation name, eg, \"posts\" of a user DELETE /api/{entityName}/{id}/{relationName} {\"id\": , \"type\": } Delete a related row, eg: delete post of a user. this only removes a relation and not the actual row. GET /action/{entityName}/{actionName} Parameters for action Invoke an action on an entity POST /action/{entityName}/{actionName} { \"attribute\": { Parameters for action }, \"id\": \"< object id >\" type: \"< entity type >\" } Invoke an action on an entity","title":"Relation APIs"},{"location":"apis/crud/#aggregate-api","text":"Method Path Query params Request body Description GET /stats/{typeName} group/filter/join/column/timestamp/timefrom/timeto/order Run aggregate function over entity table","title":"Aggregate API"},{"location":"apis/crud/#state-machine-apis","text":"Enabled for the entities for which you have enabled state machines Method Path Query params Request body Description POST /track/start/{stateMachineId} { \"id\": \" < reference id >\", type: \" < entity type > \" } Start tracking according to the state machine for an object POST /track/event/{typename}/{objectStateId}/{eventName} Invoke an event on a particular track of the state machine for a object","title":"State machine APIs"},{"location":"apis/crud/#websocket-api-wip","text":"Listed to incoming updates to data over websocket live Method Path Query params Request body Description GET /live Initiate a web socket connection","title":"Websocket API (wip)"},{"location":"apis/crud/#metadata-api","text":"Meatadata APIs expose information about the daptin server itself Method Path Query params Request body Description GET /apispec.raml RAML Spec for all API's exposed by the current instance GET /ping Replies with PONG, Endpoint for liveness probe GET /statistics Replies with PONG, Endpoint for healht check probe","title":"Metadata API"},{"location":"cloudstore/","text":"Cloud store Cloud store is an abstraction for storage API for various features of daptin like file column storage and site hosting. Most cloud storage require oauth connection and token to operate. You can create more stores by creating more rows in the cloud_store table, daptin will take care of syncing it.","title":"Cloud store"},{"location":"cloudstore/#cloud-store","text":"Cloud store is an abstraction for storage API for various features of daptin like file column storage and site hosting. Most cloud storage require oauth connection and token to operate. You can create more stores by creating more rows in the cloud_store table, daptin will take care of syncing it.","title":"Cloud store"},{"location":"cloudstore/assetcolumns/","text":"Asset columns Column types of blob types can either be stored in the database itself (not recommended) or persist in a persistent storage. After we have created a cloud store , we can point the column to a folder on the cloud store. The column will only contain metadata and the actual file will be persisted on the cloud store. To enable this, update the ForeignKeyData config of the column as follows: Create a file for the schema change: Tables: - TableName: <TableNameHere> - Columns: - ColumnName: <ColumnNameHere> ForeignKeyData: DataSource: \"cloud\" KeyName: <Cloud store name here> Namespace: <Folder name inside that clouds store> Upload it using the dashboard (You can alternatively just edit that from the dashboard). This will trigger a reconfiguration of the system and initiate a local sync of the cloud directory in a temporary location. The cloud directory will be synced down stream every 15 minutes while the uploads will be asynced but instantaneous. Such columns like image./video./audio./markdown. will be served over HTTP in a simple GET call: /asset/<table_name>/<reference_id>/<column_name>.<extension> <extension> can be anything relevant to the mimetype of the file. The column file will be dumped as it is. Useful for using in img html tag.","title":"Cloud store backed asset columns"},{"location":"cloudstore/assetcolumns/#asset-columns","text":"Column types of blob types can either be stored in the database itself (not recommended) or persist in a persistent storage. After we have created a cloud store , we can point the column to a folder on the cloud store. The column will only contain metadata and the actual file will be persisted on the cloud store. To enable this, update the ForeignKeyData config of the column as follows: Create a file for the schema change: Tables: - TableName: <TableNameHere> - Columns: - ColumnName: <ColumnNameHere> ForeignKeyData: DataSource: \"cloud\" KeyName: <Cloud store name here> Namespace: <Folder name inside that clouds store> Upload it using the dashboard (You can alternatively just edit that from the dashboard). This will trigger a reconfiguration of the system and initiate a local sync of the cloud directory in a temporary location. The cloud directory will be synced down stream every 15 minutes while the uploads will be asynced but instantaneous. Such columns like image./video./audio./markdown. will be served over HTTP in a simple GET call: /asset/<table_name>/<reference_id>/<column_name>.<extension> <extension> can be anything relevant to the mimetype of the file. The column file will be dumped as it is. Useful for using in img html tag.","title":"Asset columns"},{"location":"cloudstore/cloudstore/","text":"Cloud store Datin can work with the following storage services: Amazon Drive Amazon S3 Backblaze B2 Box Ceph DigitalOcean Spaces Dreamhost Dropbox FTP Google Cloud Storage Google Drive HTTP Hubic Memset Memstore Microsoft Azure Blob Storage Microsoft OneDrive Minio Nextloud OVH Openstack Swift Oracle Cloud Storage Ownloud pCloud put.io QingStor Rackspace Cloud Files SFTP Wasabi WebDAV Yandex Disk The local filesystem Things to keep ready If the service you want to integrate with requires authentication, create the following: An oauth connection An oauth token generated from the above connection","title":"Asset columns"},{"location":"cloudstore/cloudstore/#cloud-store","text":"Datin can work with the following storage services: Amazon Drive Amazon S3 Backblaze B2 Box Ceph DigitalOcean Spaces Dreamhost Dropbox FTP Google Cloud Storage Google Drive HTTP Hubic Memset Memstore Microsoft Azure Blob Storage Microsoft OneDrive Minio Nextloud OVH Openstack Swift Oracle Cloud Storage Ownloud pCloud put.io QingStor Rackspace Cloud Files SFTP Wasabi WebDAV Yandex Disk The local filesystem","title":"Cloud store"},{"location":"cloudstore/cloudstore/#things-to-keep-ready","text":"If the service you want to integrate with requires authentication, create the following: An oauth connection An oauth token generated from the above connection","title":"Things to keep ready"},{"location":"cloudstore/sites/","text":"Sites Sites are publicly accessible servers hosting static content over HTTP and HTTPS. FTP can also be enabled to expose any path on a cloud store as a FTP site.","title":"Sites"},{"location":"cloudstore/sites/#sites","text":"Sites are publicly accessible servers hosting static content over HTTP and HTTPS. FTP can also be enabled to expose any path on a cloud store as a FTP site.","title":"Sites"},{"location":"data-modeling/data_storage/","text":"Data storage Daptin relies on a relational database for all data persistence requirements. As covered in the installation currently the following relational database are supported: MySQL PostgreSQL SQLite This document goes into the detail of how the database is used and what are the tables created. Standard columns The following 5 columns are present in every table ColumnName ColumnType DataType Attributes id id int(11) primary key Auto increment Never exposed externally version integer int(11) get incremented every time a change is made created_at timestamp timestamp the timestamp when the row was created updated_at timestamp timestamp the timestamp when the row was last updated reference_id alias varchar(40) The id exposed in APIs permission integer int(4) Permissions - check Authorization documentation user_id foreign key int(11) the owner of this object Other columns are created based on the schema. The id column is completely for internal purposes and is never exposed in an JSON API. Every row of data inherently belongs to one user. This is the user who created that row. The associated user can be changed later. World table The world table holds the structure for all the entities and relations (including for itself). Each row contains the schema for the table in a \"world_schema_json\" column.","title":"Data store format"},{"location":"data-modeling/data_storage/#data-storage","text":"Daptin relies on a relational database for all data persistence requirements. As covered in the installation currently the following relational database are supported: MySQL PostgreSQL SQLite This document goes into the detail of how the database is used and what are the tables created.","title":"Data storage"},{"location":"data-modeling/data_storage/#standard-columns","text":"The following 5 columns are present in every table ColumnName ColumnType DataType Attributes id id int(11) primary key Auto increment Never exposed externally version integer int(11) get incremented every time a change is made created_at timestamp timestamp the timestamp when the row was created updated_at timestamp timestamp the timestamp when the row was last updated reference_id alias varchar(40) The id exposed in APIs permission integer int(4) Permissions - check Authorization documentation user_id foreign key int(11) the owner of this object Other columns are created based on the schema. The id column is completely for internal purposes and is never exposed in an JSON API. Every row of data inherently belongs to one user. This is the user who created that row. The associated user can be changed later.","title":"Standard columns"},{"location":"data-modeling/data_storage/#world-table","text":"The world table holds the structure for all the entities and relations (including for itself). Each row contains the schema for the table in a \"world_schema_json\" column.","title":"World table"},{"location":"extend/data_exchange/","text":"Data Exchanges Exchanges are internal hooks to external apis, to either push data and update an external service, or pull data and update itself from some external service. Example, use exchange to sync data creation call to Google Sheets. So on every row created using the POST API also creates a corresponding row in your google sheet. Google drive exchange YAML Exchanges : - Name : Task to excel sheet SourceAttributes : Name : todo SourceType : self TargetAttributes : sheetUrl : https://content-sheets.googleapis.com/v4/spreadsheets/1Ru-bDk3AjQotQj72k8SyxoOs84eXA1Y6sSPumBb3WSA/values/A1:append appKey : AIzaSyAC2xame4NShrzH9ZJeEpWT5GkySooa0XM TargetType : gsheet-append Attributes : - SourceColumn : \"$self.description\" TargetColumn : Task description - SourceColumn : self.schedule TargetColumn : Scheduled at Options : hasHeader : true Exchanges : - Name : Blog to excel sheet sync SourceAttributes : Name : blog SourceType : self TargetAttributes : sheetUrl : https://content-sheets.googleapis.com/v4/spreadsheets/1Ru-bDk3AjQotQj72k8SyxoOs84eXA1Y6sSPumBb3WSA/values/A1:append TargetType : gsheet-append Attributes : - SourceColumn : \"$blog.title\" TargetColumn : Blog title - SourceColumn : \"$blog.view_count\" TargetColumn : View count Options : hasHeader : true Exchanges : - Name : Blog to excel sheet sync SourceAttributes : Name : blog SourceType : table TargetAttributes : sheetUrl : https://content-sheets.googleapis.com/v4/spreadsheets/1Ru-bDk3AjQotQj72k8SyxoOs84eXA1Y6sSPumBb3WSA/values/A1:append TargetType : gsheet-append Attributes : - SourceColumn : \"$blog.title\" TargetColumn : Blog title - SourceColumn : \"$blog.view_count\" TargetColumn : View count Options : hasHeader : true","title":"Data exchange and sync"},{"location":"extend/data_exchange/#data-exchanges","text":"Exchanges are internal hooks to external apis, to either push data and update an external service, or pull data and update itself from some external service. Example, use exchange to sync data creation call to Google Sheets. So on every row created using the POST API also creates a corresponding row in your google sheet. Google drive exchange YAML Exchanges : - Name : Task to excel sheet SourceAttributes : Name : todo SourceType : self TargetAttributes : sheetUrl : https://content-sheets.googleapis.com/v4/spreadsheets/1Ru-bDk3AjQotQj72k8SyxoOs84eXA1Y6sSPumBb3WSA/values/A1:append appKey : AIzaSyAC2xame4NShrzH9ZJeEpWT5GkySooa0XM TargetType : gsheet-append Attributes : - SourceColumn : \"$self.description\" TargetColumn : Task description - SourceColumn : self.schedule TargetColumn : Scheduled at Options : hasHeader : true Exchanges : - Name : Blog to excel sheet sync SourceAttributes : Name : blog SourceType : self TargetAttributes : sheetUrl : https://content-sheets.googleapis.com/v4/spreadsheets/1Ru-bDk3AjQotQj72k8SyxoOs84eXA1Y6sSPumBb3WSA/values/A1:append TargetType : gsheet-append Attributes : - SourceColumn : \"$blog.title\" TargetColumn : Blog title - SourceColumn : \"$blog.view_count\" TargetColumn : View count Options : hasHeader : true Exchanges : - Name : Blog to excel sheet sync SourceAttributes : Name : blog SourceType : table TargetAttributes : sheetUrl : https://content-sheets.googleapis.com/v4/spreadsheets/1Ru-bDk3AjQotQj72k8SyxoOs84eXA1Y6sSPumBb3WSA/values/A1:append TargetType : gsheet-append Attributes : - SourceColumn : \"$blog.title\" TargetColumn : Blog title - SourceColumn : \"$blog.view_count\" TargetColumn : View count Options : hasHeader : true","title":"Data Exchanges"},{"location":"extend/oauth_connection/","text":"OAuth Connections Daptin is natively aware of oauth2 flows and can seamlessly handle oauth tokens and refresh tokens (if provided). Oauth connection are useful in consuming other parts of daptin easily, like cloud storage, sub-sites, 3rd party logins. To begin using oauth involved flows (eg GoogleDrive as data storage) first daptin needs to be configured about the oauth connection parameters. Creating a new oauth connection Log into the dashboard Click the tile \"OAuth connections\" Click the green \"+\" button on the top right Leave \"Allow Login\" unchecked. We can change this later Enter your service's auth endpoint, eg for google its \" https://accounts.google.com/o/oauth2/auth \" Client Id : Client Id generated by the service for daptin Client Secret : Client secret, this will be stored after encryption and wont be retrievable from daptin. Name : Identify it with a name Redirect Uri : Change this to http://<Domain>/oauth/response instead of /oauth/response Response Type : code Scope : Appropriate score defined by the oauth service to access the resource Eg: for gdrive: https://www.googleapis.com/auth/drive for gsheet: https://www.googleapis.com/auth/spreadsheets Token Url : The token info url of the oauth service: eg: https://accounts.google.com/o/oauth2/token Now you can generate a token","title":"OAuth Connections"},{"location":"extend/oauth_connection/#oauth-connections","text":"Daptin is natively aware of oauth2 flows and can seamlessly handle oauth tokens and refresh tokens (if provided). Oauth connection are useful in consuming other parts of daptin easily, like cloud storage, sub-sites, 3rd party logins. To begin using oauth involved flows (eg GoogleDrive as data storage) first daptin needs to be configured about the oauth connection parameters.","title":"OAuth Connections"},{"location":"extend/oauth_connection/#creating-a-new-oauth-connection","text":"Log into the dashboard Click the tile \"OAuth connections\" Click the green \"+\" button on the top right Leave \"Allow Login\" unchecked. We can change this later Enter your service's auth endpoint, eg for google its \" https://accounts.google.com/o/oauth2/auth \" Client Id : Client Id generated by the service for daptin Client Secret : Client secret, this will be stored after encryption and wont be retrievable from daptin. Name : Identify it with a name Redirect Uri : Change this to http://<Domain>/oauth/response instead of /oauth/response Response Type : code Scope : Appropriate score defined by the oauth service to access the resource Eg: for gdrive: https://www.googleapis.com/auth/drive for gsheet: https://www.googleapis.com/auth/spreadsheets Token Url : The token info url of the oauth service: eg: https://accounts.google.com/o/oauth2/token Now you can generate a token","title":"Creating a new oauth connection"},{"location":"extend/oauth_token/","text":"OAuth Tokens Oauth tokens can be used internally to connect to other services which require authentication. Tokens and Refresh token are stored with encryption in the database Refresh token is used to generate new tokens if the existing token expires Generate a new token Click the \"expand\" icon on the card to go into detailed view On the right side, under the \"Actions\" find \"Authenticate via OAuth\" Click it and click \"Submit\" in the next form to initiate the flow","title":"OAuth Tokens"},{"location":"extend/oauth_token/#oauth-tokens","text":"Oauth tokens can be used internally to connect to other services which require authentication. Tokens and Refresh token are stored with encryption in the database Refresh token is used to generate new tokens if the existing token expires","title":"OAuth Tokens"},{"location":"extend/oauth_token/#generate-a-new-token","text":"Click the \"expand\" icon on the card to go into detailed view On the right side, under the \"Actions\" find \"Authenticate via OAuth\" Click it and click \"Submit\" in the next form to initiate the flow","title":"Generate a new token"},{"location":"features/certificate/","text":"SSL certificates Authentication required -H \"Authorization: <TOKEN>\" List all certificates curl http://localhost:8080/api/certificate?sort = & page [ number ]= 1 & page [ size ]= 10 Create new certificate entry curl 'http://localhost:8080/api/certificate' -X POST \\ -H 'Content-Type: application/vnd.api+json' \\ -H 'Authorization: Bearer <TOKEN>' \\ --data-raw '{\"data\":{\"type\":\"certificate\",\"attributes\":{\"hostname\":\"example.com\",\"issuer\":\"self\"}},\"meta\":{}}' Creates a new entry and does not generate any certificate Self generated curl 'http://localhost:8080/action/certificate/generate_self_certificate' -X POST \\ -H 'Authorization: Bearer <TOKEN>' -H 'Content-Type: application/json;charset=utf-8' \\ --data-raw '{\"attributes\":{\"certificate_id\":\"8036429f-8935-4cab-9c5c-42261a451905\"}}' This will create a new self-signed certificate for the selected certificate hostname ACME generated Make sure the domain is pointed to this instance. curl 'http://localhost:8080/action/certificate/generate_acme_certificate' -X POST \\ -H 'Authorization: Bearer <TOKEN>' -H 'Content-Type: application/json;charset=utf-8' \\ --data-raw '{\"attributes\":{\"certificate_id\":\"8036429f-8935-4cab-9c5c-42261a451905\",\"email\":\"<YOUR_EMAIL>\"}}' This will issue a new certificate from ACME and store the key in the database Import existing You can directly do a PATCH on the entry and import your existing certificates and have them served.","title":"SSL certificates"},{"location":"features/certificate/#ssl-certificates","text":"Authentication required -H \"Authorization: <TOKEN>\" List all certificates curl http://localhost:8080/api/certificate?sort = & page [ number ]= 1 & page [ size ]= 10 Create new certificate entry curl 'http://localhost:8080/api/certificate' -X POST \\ -H 'Content-Type: application/vnd.api+json' \\ -H 'Authorization: Bearer <TOKEN>' \\ --data-raw '{\"data\":{\"type\":\"certificate\",\"attributes\":{\"hostname\":\"example.com\",\"issuer\":\"self\"}},\"meta\":{}}' Creates a new entry and does not generate any certificate","title":"SSL certificates"},{"location":"features/certificate/#self-generated","text":"curl 'http://localhost:8080/action/certificate/generate_self_certificate' -X POST \\ -H 'Authorization: Bearer <TOKEN>' -H 'Content-Type: application/json;charset=utf-8' \\ --data-raw '{\"attributes\":{\"certificate_id\":\"8036429f-8935-4cab-9c5c-42261a451905\"}}' This will create a new self-signed certificate for the selected certificate hostname","title":"Self generated"},{"location":"features/certificate/#acme-generated","text":"Make sure the domain is pointed to this instance. curl 'http://localhost:8080/action/certificate/generate_acme_certificate' -X POST \\ -H 'Authorization: Bearer <TOKEN>' -H 'Content-Type: application/json;charset=utf-8' \\ --data-raw '{\"attributes\":{\"certificate_id\":\"8036429f-8935-4cab-9c5c-42261a451905\",\"email\":\"<YOUR_EMAIL>\"}}' This will issue a new certificate from ACME and store the key in the database","title":"ACME generated"},{"location":"features/certificate/#import-existing","text":"You can directly do a PATCH on the entry and import your existing certificates and have them served.","title":"Import existing"},{"location":"features/enable-data-auditing/","text":"todo add documentation","title":"Data Auditing"},{"location":"features/enable-graphql/","text":"Graphql GraphQL endpoint provides access to all the data methods and actions in GraphQL format. Enable The GraphQL endpoint is disabled by default. If you want to use GraphQL endpoint, enable it first: Note Only an administrator user can set this config from the API. Set graphql.enable to true in config: curl \\ -H \"Authorization: Bearer TOKEN\" \\ -X POST http://localhost:6336/_config/backend/graphql.enable --data true You can try to GET it again to verify if it was set or not (in case token is invalid or not set) curl \\ -H \"Authorization: Bearer TOKEN\" \\ http://localhost:6336/_config/backend/graphql.enable You need to restart daptin for this setting to take effect. You can issue a restart by calling this: curl 'http://localhost:6336/action/world/restart_daptin' \\ -H 'Authorization: Bearer TOKEN' \\ --data '{\"attributes\":{}}' If everything goes well, the graphql endpoint should be enabled. You can test it curl http://localhost:6336/graphql Response { \"data\" : null , \"errors\" : [ { \"message\" : \"Must provide an operation.\" , \"locations\" : [] } ] } You can access the iGraphQL console at http://localhost:6336/graphql","title":"GraphQL"},{"location":"features/enable-graphql/#graphql","text":"GraphQL endpoint provides access to all the data methods and actions in GraphQL format.","title":"Graphql"},{"location":"features/enable-graphql/#enable","text":"The GraphQL endpoint is disabled by default. If you want to use GraphQL endpoint, enable it first: Note Only an administrator user can set this config from the API. Set graphql.enable to true in config: curl \\ -H \"Authorization: Bearer TOKEN\" \\ -X POST http://localhost:6336/_config/backend/graphql.enable --data true You can try to GET it again to verify if it was set or not (in case token is invalid or not set) curl \\ -H \"Authorization: Bearer TOKEN\" \\ http://localhost:6336/_config/backend/graphql.enable You need to restart daptin for this setting to take effect. You can issue a restart by calling this: curl 'http://localhost:6336/action/world/restart_daptin' \\ -H 'Authorization: Bearer TOKEN' \\ --data '{\"attributes\":{}}' If everything goes well, the graphql endpoint should be enabled. You can test it curl http://localhost:6336/graphql Response { \"data\" : null , \"errors\" : [ { \"message\" : \"Must provide an operation.\" , \"locations\" : [] } ] } You can access the iGraphQL console at http://localhost:6336/graphql","title":"Enable"},{"location":"features/enable-logs/","text":"todo add documentation","title":"Enable logs"},{"location":"features/enable-multilingual-table/","text":"todo add documentation","title":"Multilingual Table"},{"location":"features/enable-smtp-imap/","text":"SMTP Checkout the classic dashboard ui for daptin docker run -p 8080:8080 daptin/dashboard-classic Create a mail server entry with a hostname curl 'http://localhost:8080/api/mail_server' -X POST \\ -H 'Content-Type: application/vnd.api+json' \\ -H 'Authorization: Bearer <TOKEN>' \\ --data-raw '{\"data\":{\"type\":\"mail_server\",\"attributes\":{\"always_on_tls\":true,\"authentication_required\":true,\"hostname\":\"mail.example.com\",\"is_enabled\":true,\"listen_interface\":\"0.0.0.0:465\",\"max_clients\":\"20\",\"max_size\":\"10000\",\"permission\":0,\"xclient_on\":false}},\"meta\":{}}' Create a new mail account curl 'http://localhost:8080/api/mail_account' -X POST \\ -H 'Content-Type: application/vnd.api+json' \\ -H 'Authorization: Bearer <TOKEN>' \\ --data-raw '{\"data\":{\"type\":\"mail_account\",\"attributes\":{\"password\":\"password\",\"password_md5\":\"password\",\"permission\":0,\"username\":\"email-address\"},\"relationships\":{\"mail_server_id\":{\"data\":{\"id\":\"e494c2d1-ff68-4ed5-bf9c-b4804aeec0fb\",\"type\":\"mail_server\"}}}},\"meta\":{}}' Enable IMAP Three config entries imap.enabled imap.listen_interface hostname curl --location --request POST 'localhost:6336/_config/backend/imps.enabled' \\ --header 'Content-Type: application/json' \\ --header 'Authorization: Bearer <TOKEN>' \\ --data-raw 'true' curl --location --request POST 'localhost:6336/_config/backend/imap.listen_interface' \\ --header 'Content-Type: application/json' \\ --header 'Authorization: Bearer <TOKEN>' \\ --data-raw '0.0.0.0:465' curl --location --request POST 'localhost:6336/_config/backend/hostname' \\ --header 'Content-Type: application/json' \\ --header 'Authorization: Bearer <TOKEN>' \\ --data-raw 'imps.example.com' The mail account created earlier should be able to access the SMTP/IMAP interface to send and receive email. DKIM Make sure you have a SSL certificate created against the addresses you want to send mail from Check the certificate page . DKIM Selector is: d1 DKIM DNS record example . TXT v=DKIM1; p= s= indicates the selector record name used with the domain to locate the public key in DNS. The value is a name or number created by the sender. s= is included in the DKIM signature. d= indicates the domain used with the selector record (s=) to locate the public key. The value is a domain name owned by the sender. d= is included in the DKIM signature. p= indicates the public key used by a mailbox provider to match to the DKIM signature. Here is what the full DNS DKIM record looks like for example.com: d1._domainkey.example.com. 600 IN TXT \"v=DKIM1\\; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC1TaNgLlSyQMNWVLNLvyY/neDgaL2oqQE8T5illKqCgDtFHc8eHVAU+nlcaGmrKmDMw9dbgiGk1ocgZ56NR4ycfUHwQhvQPMUZw0cveel/8EAGoi/UyPmqfcPibytH81NFtTMAxUeM4Op8A6iHkvAMj5qLf4YRNsTkKAV;\" The selector (s=): d1 The domain (d=): example.com The version (v=): DKIM1 The public key (p=): MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC1TaNgLlSyQMNWVLNLvyY/neDgaL2oqQE8T5illKqCgDtFHc8eHVAU+nlcaGmrKmDMw9dbgiGk1ocgZ56NR4ycfUHwQhvQPMUZw0cveel/8EAGoi/UyPmqfcPibytH81NFtTMAxUeM4Op8A6iHkvAMj5qLf4YRNsTkKAV Required tag p= is the public key used by a mailbox provider to match to the DKIM signature generated using the private key. The value is a string of characters representing the public key. It is generated along with its corresponding private key during the DKIM set-up process. Daptin will (try to) sign all external mails from the SMTP server using the key against the FromMail hostname Restart Restart the server to start/update listening to as the SMTP server/IMAP server curl 'http://localhost:8080/action/world/restart_daptin' -X POST \\ -H 'Authorization: Bearer <TOKEN>' \\ -H 'Content-Type: application/json;charset=utf-8' \\ --data-raw '{\"attributes\":{}}'","title":"SMTP/IMPS server"},{"location":"features/enable-smtp-imap/#smtp","text":"Checkout the classic dashboard ui for daptin docker run -p 8080:8080 daptin/dashboard-classic Create a mail server entry with a hostname curl 'http://localhost:8080/api/mail_server' -X POST \\ -H 'Content-Type: application/vnd.api+json' \\ -H 'Authorization: Bearer <TOKEN>' \\ --data-raw '{\"data\":{\"type\":\"mail_server\",\"attributes\":{\"always_on_tls\":true,\"authentication_required\":true,\"hostname\":\"mail.example.com\",\"is_enabled\":true,\"listen_interface\":\"0.0.0.0:465\",\"max_clients\":\"20\",\"max_size\":\"10000\",\"permission\":0,\"xclient_on\":false}},\"meta\":{}}' Create a new mail account curl 'http://localhost:8080/api/mail_account' -X POST \\ -H 'Content-Type: application/vnd.api+json' \\ -H 'Authorization: Bearer <TOKEN>' \\ --data-raw '{\"data\":{\"type\":\"mail_account\",\"attributes\":{\"password\":\"password\",\"password_md5\":\"password\",\"permission\":0,\"username\":\"email-address\"},\"relationships\":{\"mail_server_id\":{\"data\":{\"id\":\"e494c2d1-ff68-4ed5-bf9c-b4804aeec0fb\",\"type\":\"mail_server\"}}}},\"meta\":{}}'","title":"SMTP"},{"location":"features/enable-smtp-imap/#enable-imap","text":"Three config entries imap.enabled imap.listen_interface hostname curl --location --request POST 'localhost:6336/_config/backend/imps.enabled' \\ --header 'Content-Type: application/json' \\ --header 'Authorization: Bearer <TOKEN>' \\ --data-raw 'true' curl --location --request POST 'localhost:6336/_config/backend/imap.listen_interface' \\ --header 'Content-Type: application/json' \\ --header 'Authorization: Bearer <TOKEN>' \\ --data-raw '0.0.0.0:465' curl --location --request POST 'localhost:6336/_config/backend/hostname' \\ --header 'Content-Type: application/json' \\ --header 'Authorization: Bearer <TOKEN>' \\ --data-raw 'imps.example.com' The mail account created earlier should be able to access the SMTP/IMAP interface to send and receive email.","title":"Enable IMAP"},{"location":"features/enable-smtp-imap/#dkim","text":"Make sure you have a SSL certificate created against the addresses you want to send mail from Check the certificate page . DKIM Selector is: d1 DKIM DNS record example . TXT v=DKIM1; p= s= indicates the selector record name used with the domain to locate the public key in DNS. The value is a name or number created by the sender. s= is included in the DKIM signature. d= indicates the domain used with the selector record (s=) to locate the public key. The value is a domain name owned by the sender. d= is included in the DKIM signature. p= indicates the public key used by a mailbox provider to match to the DKIM signature. Here is what the full DNS DKIM record looks like for example.com: d1._domainkey.example.com. 600 IN TXT \"v=DKIM1\\; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC1TaNgLlSyQMNWVLNLvyY/neDgaL2oqQE8T5illKqCgDtFHc8eHVAU+nlcaGmrKmDMw9dbgiGk1ocgZ56NR4ycfUHwQhvQPMUZw0cveel/8EAGoi/UyPmqfcPibytH81NFtTMAxUeM4Op8A6iHkvAMj5qLf4YRNsTkKAV;\" The selector (s=): d1 The domain (d=): example.com The version (v=): DKIM1 The public key (p=): MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC1TaNgLlSyQMNWVLNLvyY/neDgaL2oqQE8T5illKqCgDtFHc8eHVAU+nlcaGmrKmDMw9dbgiGk1ocgZ56NR4ycfUHwQhvQPMUZw0cveel/8EAGoi/UyPmqfcPibytH81NFtTMAxUeM4Op8A6iHkvAMj5qLf4YRNsTkKAV Required tag p= is the public key used by a mailbox provider to match to the DKIM signature generated using the private key. The value is a string of characters representing the public key. It is generated along with its corresponding private key during the DKIM set-up process. Daptin will (try to) sign all external mails from the SMTP server using the key against the FromMail hostname","title":"DKIM"},{"location":"features/enable-smtp-imap/#restart","text":"Restart the server to start/update listening to as the SMTP server/IMAP server curl 'http://localhost:8080/action/world/restart_daptin' -X POST \\ -H 'Authorization: Bearer <TOKEN>' \\ -H 'Content-Type: application/json;charset=utf-8' \\ --data-raw '{\"attributes\":{}}'","title":"Restart"},{"location":"groups/","text":"User groups Users and objects (rows/tables/actions) can be added to usergroups to allow restricted access to certain set of accounts.","title":"User groups"},{"location":"groups/#user-groups","text":"Users and objects (rows/tables/actions) can be added to usergroups to allow restricted access to certain set of accounts.","title":"User groups"},{"location":"guides/todo_example/","text":"","title":"Todo example"},{"location":"integrations/overview/","text":"Integrations overview You can import any OpenAPI v2/v3 spec and later use defined methods to compose actions for integration with 3rd API services. Example Todo: Add exmaple Accepting payments with Stripe Todo: Add exmaple 2fa OTP","title":"3rd party API Integrations"},{"location":"integrations/overview/#integrations-overview","text":"You can import any OpenAPI v2/v3 spec and later use defined methods to compose actions for integration with 3rd API services. Example Todo: Add exmaple Accepting payments with Stripe Todo: Add exmaple 2fa OTP","title":"Integrations overview"},{"location":"integrations/spec/","text":"API Spec integrations Import an OpenAPI v3 or v2 version specification in JSON or YAML format Integrations are enabled by default; Enabled Integrations Operations defined inside the specification can be invoked as action outcomes Checkout actions to use these integration operations","title":"API Spec integrations"},{"location":"integrations/spec/#api-spec-integrations","text":"Import an OpenAPI v3 or v2 version specification in JSON or YAML format Integrations are enabled by default;","title":"API Spec integrations"},{"location":"integrations/spec/#enabled-integrations","text":"Operations defined inside the specification can be invoked as action outcomes Checkout actions to use these integration operations","title":"Enabled Integrations"},{"location":"reference/database_configuration/","text":"","title":"Database configuration"},{"location":"setting-up/configurations/","text":"_config table Global configurations are stored in _config . _config table is not exposed as CRUD API like other tables. Only users who belong to administrators group cann reading/writing config entries from the config API. Any change in _config requires a re-init of daptin for them to take effect. Hostname Used for identification as IMAP/SMTP server Default value from os hostname JWT secret Used for signing the jwt tokens issue at login Changing this would force all users logout Encryption secret Secret used to encrypt data for storing in encrypted columns Changing the secret would make the data stored in all encrypted column unrecoverable. JWT token issuer The issuer name for JWT tokens Language default The default language expected in the Accept-Language header. Different value in Accept-Language header in request will trigger a lookup in corresponding translations table if enabled. Max connection limit The limit for max connections from a single IP Rate limit The limit for request rate limit per minute Enable Graphql Graphql endpoint /graphql is disabled by default. Set to true to use graphql endpoint Enable IMAP IMAP interface is disabled by default. Set to true to start listening to IMAP port JWT token lifetime (hours) Life time in hours of JWT tokens generated for login TOTP secret TOTP secret used for CSRF token generation and 2factor token generator Enable FTP FTP interface for sites is disabled by default (even if enabled per site). Set to true to start FTP services. Default values id name configtype configstate configenv value valuetype previousvalue created_at updated_at 1 hostname backend enabled release abbad.local 2021-01-02 15:11:56.836475 3 language.default backend enabled release en 2021-01-02 15:11:56.95177 4 limit.max_connections backend enabled release 100 2021-01-02 15:11:56.96863 5 limit.rate backend enabled release 100 2021-01-02 15:11:56.990064 6 jwt.secret backend enabled release d4f5ca52-74d3-4a50-ae6e-27b72be759b0 2021-01-02 15:11:57.026539 8 graphql.enable backend enabled release false 2021-01-02 15:11:57.100476 9 encryption.secret backend enabled release 1cdb8101fc0047e688f24c9071de76f0 2021-01-02 15:11:57.128269 10 jwt.token.issuer backend enabled release daptin-40f1e5 2021-01-02 15:11:57.148896 11 rclone.retries backend enabled release 5 2021-01-02 15:11:57.470469 12 imap.enabled backend enabled release false 2021-01-02 15:11:57.523543 13 jwt.token.life.hours backend enabled release 72 2021-01-02 15:11:57.709687 14 totp.secret backend enabled release 2DOEBQZYQBITVPTW 2021-01-02 15:11:57.752502 15 ftp.enable backend enabled release false 2021-01-02 15:11:57.999189 Get value _config table API curl \\ -H \"Authorization: Bearer <ADMIN_TOKEN>\" http://localhost:6336/_config/backend/<setting.name> Set new value _config table API curl \\ -H \"Authorization: Bearer <ADMIN_TOKEN>\" http://localhost:6336/_config/backend/<setting.name> \\ --data \"New Value\"","title":"Global Configuration"},{"location":"setting-up/configurations/#_config-table","text":"Global configurations are stored in _config . _config table is not exposed as CRUD API like other tables. Only users who belong to administrators group cann reading/writing config entries from the config API. Any change in _config requires a re-init of daptin for them to take effect.","title":"_config table"},{"location":"setting-up/configurations/#hostname","text":"Used for identification as IMAP/SMTP server Default value from os hostname","title":"Hostname"},{"location":"setting-up/configurations/#jwt-secret","text":"Used for signing the jwt tokens issue at login Changing this would force all users logout","title":"JWT secret"},{"location":"setting-up/configurations/#encryption-secret","text":"Secret used to encrypt data for storing in encrypted columns Changing the secret would make the data stored in all encrypted column unrecoverable.","title":"Encryption secret"},{"location":"setting-up/configurations/#jwt-token-issuer","text":"The issuer name for JWT tokens","title":"JWT token issuer"},{"location":"setting-up/configurations/#language-default","text":"The default language expected in the Accept-Language header. Different value in Accept-Language header in request will trigger a lookup in corresponding translations table if enabled.","title":"Language default"},{"location":"setting-up/configurations/#max-connection-limit","text":"The limit for max connections from a single IP","title":"Max connection limit"},{"location":"setting-up/configurations/#rate-limit","text":"The limit for request rate limit per minute","title":"Rate limit"},{"location":"setting-up/configurations/#enable-graphql","text":"Graphql endpoint /graphql is disabled by default. Set to true to use graphql endpoint","title":"Enable Graphql"},{"location":"setting-up/configurations/#enable-imap","text":"IMAP interface is disabled by default. Set to true to start listening to IMAP port","title":"Enable IMAP"},{"location":"setting-up/configurations/#jwt-token-lifetime-hours","text":"Life time in hours of JWT tokens generated for login","title":"JWT token lifetime (hours)"},{"location":"setting-up/configurations/#totp-secret","text":"TOTP secret used for CSRF token generation and 2factor token generator","title":"TOTP secret"},{"location":"setting-up/configurations/#enable-ftp","text":"FTP interface for sites is disabled by default (even if enabled per site). Set to true to start FTP services.","title":"Enable FTP"},{"location":"setting-up/configurations/#default-values","text":"id name configtype configstate configenv value valuetype previousvalue created_at updated_at 1 hostname backend enabled release abbad.local 2021-01-02 15:11:56.836475 3 language.default backend enabled release en 2021-01-02 15:11:56.95177 4 limit.max_connections backend enabled release 100 2021-01-02 15:11:56.96863 5 limit.rate backend enabled release 100 2021-01-02 15:11:56.990064 6 jwt.secret backend enabled release d4f5ca52-74d3-4a50-ae6e-27b72be759b0 2021-01-02 15:11:57.026539 8 graphql.enable backend enabled release false 2021-01-02 15:11:57.100476 9 encryption.secret backend enabled release 1cdb8101fc0047e688f24c9071de76f0 2021-01-02 15:11:57.128269 10 jwt.token.issuer backend enabled release daptin-40f1e5 2021-01-02 15:11:57.148896 11 rclone.retries backend enabled release 5 2021-01-02 15:11:57.470469 12 imap.enabled backend enabled release false 2021-01-02 15:11:57.523543 13 jwt.token.life.hours backend enabled release 72 2021-01-02 15:11:57.709687 14 totp.secret backend enabled release 2DOEBQZYQBITVPTW 2021-01-02 15:11:57.752502 15 ftp.enable backend enabled release false 2021-01-02 15:11:57.999189","title":"Default values"},{"location":"setting-up/configurations/#get-value-_config-table-api","text":"curl \\ -H \"Authorization: Bearer <ADMIN_TOKEN>\" http://localhost:6336/_config/backend/<setting.name>","title":"Get value _config table API"},{"location":"setting-up/configurations/#set-new-value-_config-table-api","text":"curl \\ -H \"Authorization: Bearer <ADMIN_TOKEN>\" http://localhost:6336/_config/backend/<setting.name> \\ --data \"New Value\"","title":"Set new value _config table API"},{"location":"setting-up/data_modeling/","text":"Data model Tables are the basic data structure. Tables have columns. Each column has a particular data type. Tables are exposed as JSON APIs under the /api/<entityName> path. Automatic creation Upload files of following types to import data in table, or create new table JSON { \"typeName\" : [ { da ta Row } ... ] , \"typeName2\" : [ { da ta Row } ... ] , } CSV col1,col2,col3 val1,val2,val3 val4,val5,val6 XLS Declarative creation Daptin is compatible with config files of these formats: JSON YAML HCL TOML You can choose to maintain the schema in any of the above. name, columns and column attributes If you are looking for a more reproducible way, design your entities and create JSON or YAML files. These files can be used again to create an exact same replica. Multiple schema json files can be uploaded, and changes are merged accordingly. Lets imagine we were creating a todo application and wanted to keep a track of the following for each todo item Todo list example the todo text field - title YAML example Tables : - TableName : todo Columns : - Name : title DataType : varchar(500) ColumnType : label IsIndexed : true JSON example { \"Tables\" : [ { \"TableName\" : \"todo\" , \"Columns\" : [ { \"Name\" : \"title\" , \"DataType\" : \"varchar(500)\" , \"ColumnType\" : \"label\" , \"IsIndexed\" : true } ] } ] } Column data validations Along with the fields mentioned above, we might want certain validations and conformations whenever we store a new todo Validations title cannot be empty order has to be numeric Once we have come up with the above picture in mind, we can use one of the following ways define this. Daptin uses the excellent go-playground/validator library to provide extensive validations when creating and updating data. It gives us the following unique features: Cross Field and Cross Struct validations by using validation tags or custom validators. Slice, Array and Map diving, which allows any or all levels of a multidimensional field to be validated. Validation Example JSON example JSON files are the primary way to create new entities in daptin. The above two ways ultimately create a JSON file or fetch from the market. The JSON for our todo entity will look as follows: { \"Tables\" : [{ \"TableName\" : \"todo\" , \"Columns\" : [{ \"Name\" : \"title\" , \"DataType\" : \"varchar(500)\" , \"ColumnType\" : \"label\" , \"IsIndexed\" : true }, { \"Name\" : \"completed\" , \"DataType\" : \"int(1)\" , \"ColumnType\" : \"truefalse\" , \"DefaultValue\" : \"false\" }, { \"Name\" : \"deadline\" , \"DataType\" : \"date\" , \"ColumnType\" : \"date\" , \"IsNullable\" : true }, { \"Name\" : \"order\" , \"ColumnName\" : \"item_order\" , \"DataType\" : \"int(4)\" , \"ColumnType\" : \"measurement\" , \"DefaultValue\" : \"10\" }, { \"Name\" : \"text\" , \"DataType\" : \"text\" , \"ColumnType\" : \"content\" , \"IsNullable\" : true } ], \"Conformations\" : [{ \"ColumnName\" : \"order\" , \"Tags\" : \"numeric\" }], \"validations\" : [{ \"ColumnName\" : \"title\" , \"Tags\" : \"required\" }] ]} Name: Name is a human readable name Column Name: Name of the column in the table Column Type: The type of the column. Daptin supports a variety of types and these allow daptin to give you useful options in future (eg for viewing a timeline, a date/datetime column is required) Default value: Columns can have default values, which is used a new row is created and no value for that column is specified. YAML example YAML example for todo entity is as follows Tables : - TableName : todo Columns : - Name : title DataType : varchar(500) ColumnType : label IsIndexed : true - Name : url DataType : varchar(200) ColumnType : url IsNullable : true - Name : completed DataType : int(1) ColumnType : truefalse DefaultValue : 'false' - Name : schedule DataType : date ColumnType : date IsNullable : true - Name : order ColumnName : item_order DataType : int(4) ColumnType : measurement DefaultValue : '10' - Name : text DataType : text ColumnType : content IsNullable : true Conformations : - ColumnName : order Tags : numeric Validations : - ColumnName : title Tags : required You can choose to work with either json or yaml. Once the schema is ready, it can be uploaded directly from daptin dashboard. Online entity designer The entity designer is accessible from dashboard using the \"Online designer\" button. Here you can set the name, add columns and relations and create it. This is a basic designer and more advanced features to customise every aspect of the entity will be added later. Column specifications Columns of the entity can be customized: Property Name Property Type Description Name string human readable name, can be skipped ColumnName string column name in the table ColumnDescription string human readable description ColumnType string column type is a rich type of the column IsIndexed boolean true to add an index on this column IsUnique boolean true to set a unique constraint on this column IsNullable boolean are null values allowed Permission uint64 permission column (check authorization docs) DataType string the column type inside the database DefaultValue string default value if any (has to be inside single quotes for static values Options Array[value,label] Valid values if column in enum type Column types Daptin supports a variety of rich data types, which helps it to automatically make intelligent decisions and validations. Here is a list of all column types and what should they be used for Type Name Description Example id an identity column, mostly for internal purposes 1 alias a foreign key column uuid v4 date full date, no time 2017-12-30 time time/time interval, no date 12:34:54 day day of the month 1 to 31 month month of the year 1 to 12 year Year 2017 minute minute of the hour 0 to 59 hour hour of the dat 0 - 23 datetime date + time (not stored as timestamp, served at date time string) 2017-12-30T12:34:54 email email test@domain.com name column to be used as name of the entity daptin json JSON data {} password password - are bcrypted with cost 11 $2a$11$z/VlxycDgZ... value value is enumeration type completed truefalse boolean 1 timestamp timestamp (stored as timestamp, served as timestamp) 123123123 location.latitude only latitude 34.2938 location latitude + longitude in geoJson format [34.223,64.123] location.longitude only longitude 64.123 location.altitude only altitude 34 color hex color string #ABCDE1 rating.10 rating on a scale of 10 8 measurement numeric column 534 label a label for the entity, similar to name but can be more than one red content larger contents - texts/html/json/yaml very long text file uploads, connect storage for using this url Urls/links http://docs.dapt.in Data relations A data oriented system with no relational knowledge of the data is next to an Excel sheet. Specifying relations in your data is the most important thing after creating your entities. Relations are constraints among tables and help you keep clean and consistent data. Relational data is easily accessible over APIs using a path structure like /api/<entityName>/<id>/<relationName> and the response is consistent with JSONAPI.org . Checkout the relation apis exposed by daptin. YAML example Relations : - Subject : todo Relation : has_one Object : project JSON example { \"Relations\" : [ { \"Subject\" : \"todo\" , \"Relation\" : \"has_one\" , \"Object\" : \"project\" } ] } Relations in JSON/YAML schema When uploading schema using a JSON / YAML file, relations can be added in the same file and daptin will create appropriate constraints and foreign keys in your underlying database. Continuing with our example of todos, lets say we want to group todo's in \"projects\" and each todo can belong to only a single project. Lets design a \"project\" entity: - TableName : project Columns : - Name : name DataType : varchar(200) ColumnType : name IsIndexed : true A very simple table with just a name column. Now we can define the relation between todo s and project s Relations : - Subject : todo Relation : has_one Object : project This tells daptin that todo \"has_one\" project. Relations types Any entity can be associated to any other entity (or to itself) as one of the follows Relation Name Relation Descriptio Can be empty belongs_to a single object relation No has_one a single object relation Yes has_many many related objects Yes Default relations Every entity created on daptin has at least two relations Relation Type Related Entity Purpose belongs user owner of the object has many usergroup belongs to usergroup These relations help you precisely control the authorization for each user. Read more about authorization and permissions Multiple relation There can be a scenario where two entities are related in more then 1 way. Consider the following example A blog entity A post entity Blog has many posts Each blog can have a \"highlighted post\" (blog has one \"highlighted post\") To achieve the above scenario, our schema would look like as follows Tables : - TableName : blog Columns : - Name : title DataType : varchar(500) ColumnType : label - Name : view_count DataType : int(11) ColumnType : measurement - TableName : post Columns : - Name : title DataType : varchar(200) ColumnType : label - Name : body DataType : text ColumnType : content - TableName : comment Columns : - Name : body DataType : text ColumnType : content - Name : likes_count ColumnName : likes_count DataType : int(11) ColumnType : measurement Relations : - Subject : comment Relation : belongs_to Object : post - Subject : post Relation : belongs_to Object : blog // this is our post belongs to blog relation - Subject : blog Relation : has_one Object : post ObjectName : current_post SubjectName : current_post_of // this is our highlighted post relation Notice the \"SubjectName\" and \"ObjectName\" keys which helps to name our relations more intuitively. SQL constraints belongs to A column is added to the subject entity, which refers to the Object entity, set to non nullable has one Same as above, but nullable has many A join table is created Importing data Upload one of these files: File Usage Schema JSON Create schema and apis CSV Auto create entity and upload data XLSX Auto create entity and upload data Data JSON Upload data from dumps Excel file upload Excel upload provides an easy way to create entities. This takes away the complexity of writing each column type. Daptin uses a combination of rules to identify columns and their types based on the data in the excel. You can upload data from XLS. Daptin will take care of going through your XLS file and identifying column types. This is one of the easiest and fastest ways to create entities and uploading data in daptin. You can specify relations among entities later from the online designer. CSV file upload CSV upload provides an easy way to create entities. This takes away the complexity of writing each column type. Daptin uses a combination of rules to identify columns and their types based on the data in the csv. You can upload data from CSV. Daptin will take care of going through your XLS file and identifying column types. This is one of the easiest and fastest ways to create entities and uploading data in daptin. You can specify relations among entities later from the online designer. Data conformations Daptin uses the excellent leebenson/conform library to apply conformations on data before storing them in the database Conform: keep user input in check (go, golang) Trim, sanitize, and modify struct string fields in place, based on tags. Use it for names, e-mail addresses, URL slugs, or any other form field where formatting matters. Conform doesn't attempt any kind of validation on your fields. Data auditing To enable recoding of all historical data for a particular entity, enable data audit for it in the worlds configuration. Audits are ready only and cannot be manipulated over api. You can configure the permission for your use case. All changes in daptin can be recorded by enabling auditing . History is maintained in separate audit tables which maintain a copy of all columns at each change. Audit table are entities just like regular entities. All Patch/Put/Delete calls to daptin will create an entry in the audit table if the entity is changed. Audit tables For any entity named <X> , another tables <X>_audit is added by daptin. Eg if you enable auditing of the user_account table, then a user_account_audit table will be created. The audit table will contain all the columns which are present in the original table, plus an extra column is_audit_of is added, which contains the ID of the original row. The is_audit_of is a foreign key column to the parent tables id column. Audit row Each row in the audit table is the copy of the original row just before it is being modified. The audit rows can be accessed just like any other relation. Audit table permissions By default, everyone has the access to create audit row, and no one has the access to update or delete them. These permissions can be changed, but it is not recommended at present. Type Permission Audit table permission 007007007 Audit object permission 003003003","title":"Data model"},{"location":"setting-up/data_modeling/#data-model","text":"Tables are the basic data structure. Tables have columns. Each column has a particular data type. Tables are exposed as JSON APIs under the /api/<entityName> path.","title":"Data model"},{"location":"setting-up/data_modeling/#automatic-creation","text":"Upload files of following types to import data in table, or create new table JSON { \"typeName\" : [ { da ta Row } ... ] , \"typeName2\" : [ { da ta Row } ... ] , } CSV col1,col2,col3 val1,val2,val3 val4,val5,val6 XLS","title":"Automatic creation"},{"location":"setting-up/data_modeling/#declarative-creation","text":"Daptin is compatible with config files of these formats: JSON YAML HCL TOML You can choose to maintain the schema in any of the above.","title":"Declarative creation"},{"location":"setting-up/data_modeling/#name-columns-and-column-attributes","text":"If you are looking for a more reproducible way, design your entities and create JSON or YAML files. These files can be used again to create an exact same replica. Multiple schema json files can be uploaded, and changes are merged accordingly. Lets imagine we were creating a todo application and wanted to keep a track of the following for each todo item Todo list example the todo text field - title YAML example Tables : - TableName : todo Columns : - Name : title DataType : varchar(500) ColumnType : label IsIndexed : true JSON example { \"Tables\" : [ { \"TableName\" : \"todo\" , \"Columns\" : [ { \"Name\" : \"title\" , \"DataType\" : \"varchar(500)\" , \"ColumnType\" : \"label\" , \"IsIndexed\" : true } ] } ] }","title":"name, columns and column attributes"},{"location":"setting-up/data_modeling/#column-data-validations","text":"Along with the fields mentioned above, we might want certain validations and conformations whenever we store a new todo Validations title cannot be empty order has to be numeric Once we have come up with the above picture in mind, we can use one of the following ways define this. Daptin uses the excellent go-playground/validator library to provide extensive validations when creating and updating data. It gives us the following unique features: Cross Field and Cross Struct validations by using validation tags or custom validators. Slice, Array and Map diving, which allows any or all levels of a multidimensional field to be validated.","title":"Column data validations"},{"location":"setting-up/data_modeling/#validation-example","text":"","title":"Validation Example"},{"location":"setting-up/data_modeling/#json-example","text":"JSON files are the primary way to create new entities in daptin. The above two ways ultimately create a JSON file or fetch from the market. The JSON for our todo entity will look as follows: { \"Tables\" : [{ \"TableName\" : \"todo\" , \"Columns\" : [{ \"Name\" : \"title\" , \"DataType\" : \"varchar(500)\" , \"ColumnType\" : \"label\" , \"IsIndexed\" : true }, { \"Name\" : \"completed\" , \"DataType\" : \"int(1)\" , \"ColumnType\" : \"truefalse\" , \"DefaultValue\" : \"false\" }, { \"Name\" : \"deadline\" , \"DataType\" : \"date\" , \"ColumnType\" : \"date\" , \"IsNullable\" : true }, { \"Name\" : \"order\" , \"ColumnName\" : \"item_order\" , \"DataType\" : \"int(4)\" , \"ColumnType\" : \"measurement\" , \"DefaultValue\" : \"10\" }, { \"Name\" : \"text\" , \"DataType\" : \"text\" , \"ColumnType\" : \"content\" , \"IsNullable\" : true } ], \"Conformations\" : [{ \"ColumnName\" : \"order\" , \"Tags\" : \"numeric\" }], \"validations\" : [{ \"ColumnName\" : \"title\" , \"Tags\" : \"required\" }] ]} Name: Name is a human readable name Column Name: Name of the column in the table Column Type: The type of the column. Daptin supports a variety of types and these allow daptin to give you useful options in future (eg for viewing a timeline, a date/datetime column is required) Default value: Columns can have default values, which is used a new row is created and no value for that column is specified.","title":"JSON example"},{"location":"setting-up/data_modeling/#yaml-example","text":"YAML example for todo entity is as follows Tables : - TableName : todo Columns : - Name : title DataType : varchar(500) ColumnType : label IsIndexed : true - Name : url DataType : varchar(200) ColumnType : url IsNullable : true - Name : completed DataType : int(1) ColumnType : truefalse DefaultValue : 'false' - Name : schedule DataType : date ColumnType : date IsNullable : true - Name : order ColumnName : item_order DataType : int(4) ColumnType : measurement DefaultValue : '10' - Name : text DataType : text ColumnType : content IsNullable : true Conformations : - ColumnName : order Tags : numeric Validations : - ColumnName : title Tags : required You can choose to work with either json or yaml. Once the schema is ready, it can be uploaded directly from daptin dashboard.","title":"YAML example"},{"location":"setting-up/data_modeling/#online-entity-designer","text":"The entity designer is accessible from dashboard using the \"Online designer\" button. Here you can set the name, add columns and relations and create it. This is a basic designer and more advanced features to customise every aspect of the entity will be added later.","title":"Online entity designer"},{"location":"setting-up/data_modeling/#column-specifications","text":"Columns of the entity can be customized: Property Name Property Type Description Name string human readable name, can be skipped ColumnName string column name in the table ColumnDescription string human readable description ColumnType string column type is a rich type of the column IsIndexed boolean true to add an index on this column IsUnique boolean true to set a unique constraint on this column IsNullable boolean are null values allowed Permission uint64 permission column (check authorization docs) DataType string the column type inside the database DefaultValue string default value if any (has to be inside single quotes for static values Options Array[value,label] Valid values if column in enum type","title":"Column specifications"},{"location":"setting-up/data_modeling/#column-types","text":"Daptin supports a variety of rich data types, which helps it to automatically make intelligent decisions and validations. Here is a list of all column types and what should they be used for Type Name Description Example id an identity column, mostly for internal purposes 1 alias a foreign key column uuid v4 date full date, no time 2017-12-30 time time/time interval, no date 12:34:54 day day of the month 1 to 31 month month of the year 1 to 12 year Year 2017 minute minute of the hour 0 to 59 hour hour of the dat 0 - 23 datetime date + time (not stored as timestamp, served at date time string) 2017-12-30T12:34:54 email email test@domain.com name column to be used as name of the entity daptin json JSON data {} password password - are bcrypted with cost 11 $2a$11$z/VlxycDgZ... value value is enumeration type completed truefalse boolean 1 timestamp timestamp (stored as timestamp, served as timestamp) 123123123 location.latitude only latitude 34.2938 location latitude + longitude in geoJson format [34.223,64.123] location.longitude only longitude 64.123 location.altitude only altitude 34 color hex color string #ABCDE1 rating.10 rating on a scale of 10 8 measurement numeric column 534 label a label for the entity, similar to name but can be more than one red content larger contents - texts/html/json/yaml very long text file uploads, connect storage for using this url Urls/links http://docs.dapt.in","title":"Column types"},{"location":"setting-up/data_modeling/#data-relations","text":"A data oriented system with no relational knowledge of the data is next to an Excel sheet. Specifying relations in your data is the most important thing after creating your entities. Relations are constraints among tables and help you keep clean and consistent data. Relational data is easily accessible over APIs using a path structure like /api/<entityName>/<id>/<relationName> and the response is consistent with JSONAPI.org . Checkout the relation apis exposed by daptin. YAML example Relations : - Subject : todo Relation : has_one Object : project JSON example { \"Relations\" : [ { \"Subject\" : \"todo\" , \"Relation\" : \"has_one\" , \"Object\" : \"project\" } ] }","title":"Data relations"},{"location":"setting-up/data_modeling/#relations-in-jsonyaml-schema","text":"When uploading schema using a JSON / YAML file, relations can be added in the same file and daptin will create appropriate constraints and foreign keys in your underlying database. Continuing with our example of todos, lets say we want to group todo's in \"projects\" and each todo can belong to only a single project. Lets design a \"project\" entity: - TableName : project Columns : - Name : name DataType : varchar(200) ColumnType : name IsIndexed : true A very simple table with just a name column. Now we can define the relation between todo s and project s Relations : - Subject : todo Relation : has_one Object : project This tells daptin that todo \"has_one\" project.","title":"Relations in JSON/YAML schema"},{"location":"setting-up/data_modeling/#relations-types","text":"Any entity can be associated to any other entity (or to itself) as one of the follows Relation Name Relation Descriptio Can be empty belongs_to a single object relation No has_one a single object relation Yes has_many many related objects Yes","title":"Relations types"},{"location":"setting-up/data_modeling/#default-relations","text":"Every entity created on daptin has at least two relations Relation Type Related Entity Purpose belongs user owner of the object has many usergroup belongs to usergroup These relations help you precisely control the authorization for each user. Read more about authorization and permissions","title":"Default relations"},{"location":"setting-up/data_modeling/#multiple-relation","text":"There can be a scenario where two entities are related in more then 1 way. Consider the following example A blog entity A post entity Blog has many posts Each blog can have a \"highlighted post\" (blog has one \"highlighted post\") To achieve the above scenario, our schema would look like as follows Tables : - TableName : blog Columns : - Name : title DataType : varchar(500) ColumnType : label - Name : view_count DataType : int(11) ColumnType : measurement - TableName : post Columns : - Name : title DataType : varchar(200) ColumnType : label - Name : body DataType : text ColumnType : content - TableName : comment Columns : - Name : body DataType : text ColumnType : content - Name : likes_count ColumnName : likes_count DataType : int(11) ColumnType : measurement Relations : - Subject : comment Relation : belongs_to Object : post - Subject : post Relation : belongs_to Object : blog // this is our post belongs to blog relation - Subject : blog Relation : has_one Object : post ObjectName : current_post SubjectName : current_post_of // this is our highlighted post relation Notice the \"SubjectName\" and \"ObjectName\" keys which helps to name our relations more intuitively.","title":"Multiple relation"},{"location":"setting-up/data_modeling/#sql-constraints","text":"","title":"SQL constraints"},{"location":"setting-up/data_modeling/#belongs-to","text":"A column is added to the subject entity, which refers to the Object entity, set to non nullable","title":"belongs to"},{"location":"setting-up/data_modeling/#has-one","text":"Same as above, but nullable","title":"has one"},{"location":"setting-up/data_modeling/#has-many","text":"A join table is created","title":"has many"},{"location":"setting-up/data_modeling/#importing-data","text":"Upload one of these files: File Usage Schema JSON Create schema and apis CSV Auto create entity and upload data XLSX Auto create entity and upload data Data JSON Upload data from dumps","title":"Importing data"},{"location":"setting-up/data_modeling/#excel-file-upload","text":"Excel upload provides an easy way to create entities. This takes away the complexity of writing each column type. Daptin uses a combination of rules to identify columns and their types based on the data in the excel. You can upload data from XLS. Daptin will take care of going through your XLS file and identifying column types. This is one of the easiest and fastest ways to create entities and uploading data in daptin. You can specify relations among entities later from the online designer.","title":"Excel file upload"},{"location":"setting-up/data_modeling/#csv-file-upload","text":"CSV upload provides an easy way to create entities. This takes away the complexity of writing each column type. Daptin uses a combination of rules to identify columns and their types based on the data in the csv. You can upload data from CSV. Daptin will take care of going through your XLS file and identifying column types. This is one of the easiest and fastest ways to create entities and uploading data in daptin. You can specify relations among entities later from the online designer.","title":"CSV file upload"},{"location":"setting-up/data_modeling/#data-conformations","text":"Daptin uses the excellent leebenson/conform library to apply conformations on data before storing them in the database Conform: keep user input in check (go, golang) Trim, sanitize, and modify struct string fields in place, based on tags. Use it for names, e-mail addresses, URL slugs, or any other form field where formatting matters. Conform doesn't attempt any kind of validation on your fields.","title":"Data conformations"},{"location":"setting-up/data_modeling/#data-auditing","text":"To enable recoding of all historical data for a particular entity, enable data audit for it in the worlds configuration. Audits are ready only and cannot be manipulated over api. You can configure the permission for your use case. All changes in daptin can be recorded by enabling auditing . History is maintained in separate audit tables which maintain a copy of all columns at each change. Audit table are entities just like regular entities. All Patch/Put/Delete calls to daptin will create an entry in the audit table if the entity is changed.","title":"Data auditing"},{"location":"setting-up/data_modeling/#audit-tables","text":"For any entity named <X> , another tables <X>_audit is added by daptin. Eg if you enable auditing of the user_account table, then a user_account_audit table will be created. The audit table will contain all the columns which are present in the original table, plus an extra column is_audit_of is added, which contains the ID of the original row. The is_audit_of is a foreign key column to the parent tables id column.","title":"Audit tables"},{"location":"setting-up/data_modeling/#audit-row","text":"Each row in the audit table is the copy of the original row just before it is being modified. The audit rows can be accessed just like any other relation.","title":"Audit row"},{"location":"setting-up/data_modeling/#audit-table-permissions","text":"By default, everyone has the access to create audit row, and no one has the access to update or delete them. These permissions can be changed, but it is not recommended at present. Type Permission Audit table permission 007007007 Audit object permission 003003003","title":"Audit table permissions"},{"location":"setting-up/installation/","text":"Installation Deploying a new instance Deployment preference Getting started Heroku Docker docker run -p 8080:8080 L3m0nSo/Memories Kubernetes Service & Deployment YAML Development go get github.com/L3m0nSo/Memories Linux (386/amd64/arm5,6,7) Download static linux builds Windows go get github.com/L3m0nSo/Memories OS X go get github.com/L3m0nSo/Memories Load testing Docker compose Raspberry Pi Linux arm 7 static build Native binary Daptin is available as a native binary. You can download the binary for the following os from github releases Windows 32/64 OS X 64 Linux 32/64/arm/mips https://github.com/L3m0nSo/Memories/releases Execute ./daptin to run daptin. It will create a sqlite database on the disk and start listening on port 6336. CLI Options Argument Definition port set the port to listen http_port set the https port to listen runtime runtime test/debug/release for logs dashboard path to default dashboard static build served at [ / ] db_type mysql/postgres/sqlite3 db_connection_string Database Connection String Database connection string SQLite -db_connection_string test.db MySQL -db_connection_string \"<username>:<password>@tcp(<hostname>:<port>)/<db_name>\" PostgreSQL: -db_connection_string \"host=<hostname> port=<port> user=<username> password=<password> dbname=<db_name> sslmode=enable/disable\" Heroku deployment Heroku is the best way to test out a live instance of daptin. Daptin has a very low memory footprint and can run smoothly even on heroku's smallest instance. Note: Heroku puts instances to sleep after 30 minutes of idleness, which will erase all the data. It will behave like a fresh instance when it wakes up. You can subscribe to their minimum paid plan to remove this sleep due to idleness. Docker image Deploy the docker image Start daptin on your machine using docker docker run -p 8080:8080 L3m0nSo/Memories https://hub.docker.com/r/L3m0nSo/Memories/ Docker-compose Docker compose is a great tool to bring up a mysql/postgres backed daptin instance version : '3' services : web : image : L3m0nSo/Memories ports : - \"8090:8080\" restart : always environment : DAPTIN_PORT : '8080' DAPTIN_DB_TYPE : 'mysql' DAPTIN_DB_CONNECTION_STRING : 'dev:dev@tcp(mysqldb:3306)/daptin' depends_on : - mysqldb mysqldb : image : mysql container_name : ${MYSQL_HOST} restart : always env_file : - \".env\" environment : - MYSQL_DATABASE=${MYSQL_DATABASE} - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} - MYSQL_USER=${MYSQL_USER} - MYSQL_PASSWORD=${MYSQL_PASSWORD} ports : - \"8989:3306\" volumes : - \"./data/db/mysql:/var/lib/mysql\" Kubernetes deployment Daptin can be infinitely scaled on kubernetes Example apiVersion : v1 kind : Service metadata : name : daptin-instance labels : app : daptin spec : ports : - port : 8080 selector : app : daptin tier : production --- apiVersion : extensions/v1beta1 kind : Deployment metadata : name : daptin-daptin labels : app : daptin spec : strategy : type : Recreate template : metadata : labels : app : daptin tier : testing spec : containers : - image : L3m0nSo/Memories:latest name : daptin args : [ '-db_type' , 'mysql' , '-db_connection_string' , 'user:password@tcp(<mysql_service>:3306)/daptin' ] ports : - containerPort : 8080 name : daptin --- apiVersion : extensions/v1beta1 kind : Ingress metadata : name : daptin-test spec : rules : - host : hello.website http : paths : - backend : serviceName : daptin-testing servicePort : 8080 Database configuration Daptin can use one of the following database for data persistence Mysql Postgres SQLite [Default] If nothing specified, a sqlite database is created on the local file system and is used for all purposes. (uploads/blobs are not stored in database) You can customise the database connection properties when starting daptin MySQL To use mysql, start daptin as follows ./daptin -db_type=mysql -db_connection_string='<username>:<password>@tcp(<hostname>:<port>)/<db_name>' PostgreSQL ./daptin -db_type=postgres -db_connection_string='host=<hostname> port=<port> user=<username> password=<password> dbname=<db_name> sslmode=enable/disable' SQLite By default a \"daptin.db\" file is created to store data ./daptin -db_type=sqlite -db_connection_string=db_file_name.db Port Daptin will use the following ports for various services (when enabled) -port :8080 Service Port To change HTTP (JSON/GraphQL) 6336 CLI option -port :80 HTTPS 6443 CLI option -https_port :80 IMAP 6443 _config entry SMTP 2525 /mail_server row entry Restart Various low level configure changes requires a reset of the server to take place. Restart can be triggered using an action API and takes about 5-10 seconds. You can issue a daptin restart from the dashboard. Daptin takes about 15 seconds approx to start up and configure everything.","title":"Download and Deploy"},{"location":"setting-up/installation/#installation","text":"","title":"Installation"},{"location":"setting-up/installation/#deploying-a-new-instance","text":"Deployment preference Getting started Heroku Docker docker run -p 8080:8080 L3m0nSo/Memories Kubernetes Service & Deployment YAML Development go get github.com/L3m0nSo/Memories Linux (386/amd64/arm5,6,7) Download static linux builds Windows go get github.com/L3m0nSo/Memories OS X go get github.com/L3m0nSo/Memories Load testing Docker compose Raspberry Pi Linux arm 7 static build","title":"Deploying a new instance"},{"location":"setting-up/installation/#native-binary","text":"Daptin is available as a native binary. You can download the binary for the following os from github releases Windows 32/64 OS X 64 Linux 32/64/arm/mips https://github.com/L3m0nSo/Memories/releases Execute ./daptin to run daptin. It will create a sqlite database on the disk and start listening on port 6336.","title":"Native binary"},{"location":"setting-up/installation/#cli-options","text":"Argument Definition port set the port to listen http_port set the https port to listen runtime runtime test/debug/release for logs dashboard path to default dashboard static build served at [ / ] db_type mysql/postgres/sqlite3 db_connection_string Database Connection String","title":"CLI Options"},{"location":"setting-up/installation/#database-connection-string","text":"","title":"Database connection string"},{"location":"setting-up/installation/#sqlite","text":"-db_connection_string test.db","title":"SQLite"},{"location":"setting-up/installation/#mysql","text":"-db_connection_string \"<username>:<password>@tcp(<hostname>:<port>)/<db_name>\"","title":"MySQL"},{"location":"setting-up/installation/#postgresql","text":"-db_connection_string \"host=<hostname> port=<port> user=<username> password=<password> dbname=<db_name> sslmode=enable/disable\"","title":"PostgreSQL:"},{"location":"setting-up/installation/#heroku-deployment","text":"Heroku is the best way to test out a live instance of daptin. Daptin has a very low memory footprint and can run smoothly even on heroku's smallest instance. Note: Heroku puts instances to sleep after 30 minutes of idleness, which will erase all the data. It will behave like a fresh instance when it wakes up. You can subscribe to their minimum paid plan to remove this sleep due to idleness.","title":"Heroku deployment"},{"location":"setting-up/installation/#docker-image","text":"Deploy the docker image Start daptin on your machine using docker docker run -p 8080:8080 L3m0nSo/Memories https://hub.docker.com/r/L3m0nSo/Memories/","title":"Docker image"},{"location":"setting-up/installation/#docker-compose","text":"Docker compose is a great tool to bring up a mysql/postgres backed daptin instance version : '3' services : web : image : L3m0nSo/Memories ports : - \"8090:8080\" restart : always environment : DAPTIN_PORT : '8080' DAPTIN_DB_TYPE : 'mysql' DAPTIN_DB_CONNECTION_STRING : 'dev:dev@tcp(mysqldb:3306)/daptin' depends_on : - mysqldb mysqldb : image : mysql container_name : ${MYSQL_HOST} restart : always env_file : - \".env\" environment : - MYSQL_DATABASE=${MYSQL_DATABASE} - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} - MYSQL_USER=${MYSQL_USER} - MYSQL_PASSWORD=${MYSQL_PASSWORD} ports : - \"8989:3306\" volumes : - \"./data/db/mysql:/var/lib/mysql\"","title":"Docker-compose"},{"location":"setting-up/installation/#kubernetes-deployment","text":"Daptin can be infinitely scaled on kubernetes Example apiVersion : v1 kind : Service metadata : name : daptin-instance labels : app : daptin spec : ports : - port : 8080 selector : app : daptin tier : production --- apiVersion : extensions/v1beta1 kind : Deployment metadata : name : daptin-daptin labels : app : daptin spec : strategy : type : Recreate template : metadata : labels : app : daptin tier : testing spec : containers : - image : L3m0nSo/Memories:latest name : daptin args : [ '-db_type' , 'mysql' , '-db_connection_string' , 'user:password@tcp(<mysql_service>:3306)/daptin' ] ports : - containerPort : 8080 name : daptin --- apiVersion : extensions/v1beta1 kind : Ingress metadata : name : daptin-test spec : rules : - host : hello.website http : paths : - backend : serviceName : daptin-testing servicePort : 8080","title":"Kubernetes deployment"},{"location":"setting-up/installation/#database-configuration","text":"Daptin can use one of the following database for data persistence Mysql Postgres SQLite [Default] If nothing specified, a sqlite database is created on the local file system and is used for all purposes. (uploads/blobs are not stored in database) You can customise the database connection properties when starting daptin","title":"Database configuration"},{"location":"setting-up/installation/#mysql_1","text":"To use mysql, start daptin as follows ./daptin -db_type=mysql -db_connection_string='<username>:<password>@tcp(<hostname>:<port>)/<db_name>'","title":"MySQL"},{"location":"setting-up/installation/#postgresql_1","text":"./daptin -db_type=postgres -db_connection_string='host=<hostname> port=<port> user=<username> password=<password> dbname=<db_name> sslmode=enable/disable'","title":"PostgreSQL"},{"location":"setting-up/installation/#sqlite_1","text":"By default a \"daptin.db\" file is created to store data ./daptin -db_type=sqlite -db_connection_string=db_file_name.db","title":"SQLite"},{"location":"setting-up/installation/#port","text":"Daptin will use the following ports for various services (when enabled) -port :8080 Service Port To change HTTP (JSON/GraphQL) 6336 CLI option -port :80 HTTPS 6443 CLI option -https_port :80 IMAP 6443 _config entry SMTP 2525 /mail_server row entry","title":"Port"},{"location":"setting-up/installation/#restart","text":"Various low level configure changes requires a reset of the server to take place. Restart can be triggered using an action API and takes about 5-10 seconds. You can issue a daptin restart from the dashboard. Daptin takes about 15 seconds approx to start up and configure everything.","title":"Restart"},{"location":"setting-up/settingup/","text":"Getting started Accessing web dashboard Open up the dashboard on http://localhost:8080/ You will be presented with the Sign-in screen. If you are on a freshly created instance, then you need to create a user first. First user Use the dashboard to sign-up as the first user or call the sign-up API manually to create the first user. Users must create a password with at least 8 characters. API CALL As you will see later in actions sign up and sign in api's are nothing special but just actions defined on certain tables. Request curl 'http://localhost/action/user_account/signup' --data '{\"attributes\":{\"name\":\"name\",\"email\":\"email@domain.com\",\"password\":\"password123\",\"passwordConfirm\":\"password123\"}}' Response [{ \"ResponseType\" : \"client.notify\" , \"Attributes\" : { \"message\" : \"Created user_account\" , \"title\" : \"Success\" , \"type\" : \"success\" } }, { \"ResponseType\" : \"client.notify\" , \"Attributes\" : { \"message\" : \"Created usergroup\" , \"title\" : \"Success\" , \"type\" : \"success\" } }, { \"ResponseType\" : \"client.notify\" , \"Attributes\" : { \"message\" : \"Created user_account_user_account_id_has_usergroup_usergroup_id\" , \"title\" : \"Success\" , \"type\" : \"success\" } }, { \"ResponseType\" : \"client.notify\" , \"Attributes\" : { \"__type\" : \"client.notify\" , \"message\" : \"Sign-up successful. Redirecting to sign in\" , \"title\" : \"Success\" , \"type\" : \"success\" } }, { \"ResponseType\" : \"client.redirect\" , \"Attributes\" : { \"__type\" : \"client.redirect\" , \"delay\" : 2000 , \"location\" : \"/auth/signin\" , \"window\" : \"self\" } }] Nothing important in the response of signup to keep track of. Successful response means now we can login as a user and become the administrator. A failure response would look like this: [{ \"ResponseType\" : \"client.notify\" , \"Attributes\" : { \"message\" : \"Failed to create user_account. Error 1062: Duplicate entry 'email@domain.com' for key 'i79f4e12e72442d30f2b99a84fce3c392'\" , \"title\" : \"Failed\" , \"type\" : \"error\" } }] Or [{ \"ResponseType\" : \"client.notify\" , \"Attributes\" : { \"message\" : \"http error (400) email and 0 more errors, invalid value for email\" , \"title\" : \"failed\" , \"type\" : \"error\" } }] Logging in dashboard API CAll Request curl 'http://localhost/action/user_account/signin' --data '{\"attributes\":{\"email\":\"email@domain.com\",\"password\":\"password123\"}}' Response [{ \"ResponseType\" : \"client.store.set\" , \"Attributes\" : { \"key\" : \"token\" , \"value\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFydHBhckBnbWFpbC5jb20iLCJleHAiOjE1ODE2MTcxNTEsImlhdCI6IjIwMjAtMDItMTBUMjM6MzU6NTEuMTc2MjA5ODAxKzA1OjMwIiwiaXNzIjoiZGFwdGluLTNhZTI5ZCIsImp0aSI6IjQ4MTRkYjhhLTg1ZWEtNDc0ZS1iMWQ0LWQ5OGM4MTU5ZDU5MCIsIm5hbWUiOiJwYXJ0aCIsIm5iZiI6MTU4MTM1Nzk1MSwicGljdHVyZSI6Imh0dHBzOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIvM2M5MjI3NmI4NmMzNGJkNjZmZjQwMzFlNjNmM2JkZTdcdTAwMjZkPW1vbnN0ZXJpZCJ9.deocIlHXWH_2fsrYBx5lSGQVJxad044tj4j4amy2Zyk\" } }, { \"ResponseType\" : \"client.cookie.set\" , \"Attributes\" : { \"key\" : \"token\" , \"value\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFydHBhckBnbWFpbC5jb20iLCJleHAiOjE1ODE2MTcxNTEsImlhdCI6IjIwMjAtMDItMTBUMjM6MzU6NTEuMTc2MjA5ODAxKzA1OjMwIiwiaXNzIjoiZGFwdGluLTNhZTI5ZCIsImp0aSI6IjQ4MTRkYjhhLTg1ZWEtNDc0ZS1iMWQ0LWQ5OGM4MTU5ZDU5MCIsIm5hbWUiOiJwYXJ0aCIsIm5iZiI6MTU4MTM1Nzk1MSwicGljdHVyZSI6Imh0dHBzOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIvM2M5MjI3NmI4NmMzNGJkNjZmZjQwMzFlNjNmM2JkZTdcdTAwMjZkPW1vbnN0ZXJpZCJ9.deocIlHXWH_2fsrYBx5lSGQVJxad044tj4j4amy2Zyk\" } }, { \"ResponseType\" : \"client.notify\" , \"Attributes\" : { \"message\" : \"Logged in\" , \"title\" : \"Success\" , \"type\" : \"success\" } }, { \"ResponseType\" : \"client.redirect\" , \"Attributes\" : { \"delay\" : 2000 , \"location\" : \"/\" , \"window\" : \"self\" } }] The token is to be used in the Authorization header of for all HTTP calls to identify the user. Become Administrator First user to sign up with automatically become an administrator. More administrators can be added.","title":"Accessing the web dashboard"},{"location":"setting-up/settingup/#getting-started","text":"","title":"Getting started"},{"location":"setting-up/settingup/#accessing-web-dashboard","text":"Open up the dashboard on http://localhost:8080/ You will be presented with the Sign-in screen. If you are on a freshly created instance, then you need to create a user first.","title":"Accessing web dashboard"},{"location":"setting-up/settingup/#first-user","text":"Use the dashboard to sign-up as the first user or call the sign-up API manually to create the first user. Users must create a password with at least 8 characters. API CALL As you will see later in actions sign up and sign in api's are nothing special but just actions defined on certain tables. Request curl 'http://localhost/action/user_account/signup' --data '{\"attributes\":{\"name\":\"name\",\"email\":\"email@domain.com\",\"password\":\"password123\",\"passwordConfirm\":\"password123\"}}' Response [{ \"ResponseType\" : \"client.notify\" , \"Attributes\" : { \"message\" : \"Created user_account\" , \"title\" : \"Success\" , \"type\" : \"success\" } }, { \"ResponseType\" : \"client.notify\" , \"Attributes\" : { \"message\" : \"Created usergroup\" , \"title\" : \"Success\" , \"type\" : \"success\" } }, { \"ResponseType\" : \"client.notify\" , \"Attributes\" : { \"message\" : \"Created user_account_user_account_id_has_usergroup_usergroup_id\" , \"title\" : \"Success\" , \"type\" : \"success\" } }, { \"ResponseType\" : \"client.notify\" , \"Attributes\" : { \"__type\" : \"client.notify\" , \"message\" : \"Sign-up successful. Redirecting to sign in\" , \"title\" : \"Success\" , \"type\" : \"success\" } }, { \"ResponseType\" : \"client.redirect\" , \"Attributes\" : { \"__type\" : \"client.redirect\" , \"delay\" : 2000 , \"location\" : \"/auth/signin\" , \"window\" : \"self\" } }] Nothing important in the response of signup to keep track of. Successful response means now we can login as a user and become the administrator. A failure response would look like this: [{ \"ResponseType\" : \"client.notify\" , \"Attributes\" : { \"message\" : \"Failed to create user_account. Error 1062: Duplicate entry 'email@domain.com' for key 'i79f4e12e72442d30f2b99a84fce3c392'\" , \"title\" : \"Failed\" , \"type\" : \"error\" } }] Or [{ \"ResponseType\" : \"client.notify\" , \"Attributes\" : { \"message\" : \"http error (400) email and 0 more errors, invalid value for email\" , \"title\" : \"failed\" , \"type\" : \"error\" } }]","title":"First user"},{"location":"setting-up/settingup/#logging-in-dashboard","text":"API CAll Request curl 'http://localhost/action/user_account/signin' --data '{\"attributes\":{\"email\":\"email@domain.com\",\"password\":\"password123\"}}' Response [{ \"ResponseType\" : \"client.store.set\" , \"Attributes\" : { \"key\" : \"token\" , \"value\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFydHBhckBnbWFpbC5jb20iLCJleHAiOjE1ODE2MTcxNTEsImlhdCI6IjIwMjAtMDItMTBUMjM6MzU6NTEuMTc2MjA5ODAxKzA1OjMwIiwiaXNzIjoiZGFwdGluLTNhZTI5ZCIsImp0aSI6IjQ4MTRkYjhhLTg1ZWEtNDc0ZS1iMWQ0LWQ5OGM4MTU5ZDU5MCIsIm5hbWUiOiJwYXJ0aCIsIm5iZiI6MTU4MTM1Nzk1MSwicGljdHVyZSI6Imh0dHBzOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIvM2M5MjI3NmI4NmMzNGJkNjZmZjQwMzFlNjNmM2JkZTdcdTAwMjZkPW1vbnN0ZXJpZCJ9.deocIlHXWH_2fsrYBx5lSGQVJxad044tj4j4amy2Zyk\" } }, { \"ResponseType\" : \"client.cookie.set\" , \"Attributes\" : { \"key\" : \"token\" , \"value\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFydHBhckBnbWFpbC5jb20iLCJleHAiOjE1ODE2MTcxNTEsImlhdCI6IjIwMjAtMDItMTBUMjM6MzU6NTEuMTc2MjA5ODAxKzA1OjMwIiwiaXNzIjoiZGFwdGluLTNhZTI5ZCIsImp0aSI6IjQ4MTRkYjhhLTg1ZWEtNDc0ZS1iMWQ0LWQ5OGM4MTU5ZDU5MCIsIm5hbWUiOiJwYXJ0aCIsIm5iZiI6MTU4MTM1Nzk1MSwicGljdHVyZSI6Imh0dHBzOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIvM2M5MjI3NmI4NmMzNGJkNjZmZjQwMzFlNjNmM2JkZTdcdTAwMjZkPW1vbnN0ZXJpZCJ9.deocIlHXWH_2fsrYBx5lSGQVJxad044tj4j4amy2Zyk\" } }, { \"ResponseType\" : \"client.notify\" , \"Attributes\" : { \"message\" : \"Logged in\" , \"title\" : \"Success\" , \"type\" : \"success\" } }, { \"ResponseType\" : \"client.redirect\" , \"Attributes\" : { \"delay\" : 2000 , \"location\" : \"/\" , \"window\" : \"self\" } }] The token is to be used in the Authorization header of for all HTTP calls to identify the user.","title":"Logging in dashboard"},{"location":"setting-up/settingup/#become-administrator","text":"First user to sign up with automatically become an administrator. More administrators can be added.","title":"Become Administrator"},{"location":"state/machines/","text":"State tracking State of an object can help you tracing any sort of progress while making sure you maintain the consistence of the state. For eg, you might want to track the status of a \"blog post\" in terms of \"draft\"/\"edited\"/\"published\" which pre-defined endpoints defining the flow of states. Tracking the status of things is one of the most common operation in most business flows. Daptin has a native support for state tracking and allows a lot of convienent features. Defining a state machine Define a state machine in YAML or JSON as follows: State machine description YAML StateMachineDescriptions : - Name : task_status Label : Task Status InitialState : to_be_done Events : - Name : start Label : Start Src : - to_be_done - delayed Dst : started - Name : delayed Label : Unable to pick up Src : - to_be_done Dst : delayed - Name : ongoing Label : Record progress Src : - started - ongoing Dst : ongoing - Name : interrupted Label : Interrupted Src : - started - ongoing Dst : interrupted - Name : resume Label : Resume from interruption Src : - interrupted Dst : ongoing - Name : completed Label : Mark as completed Src : - ongoing - started Dst : completed Using state machine descriptions with daptin expose couple of super useful apis to manage state based data. Enabling task_status state machine on todo entity will expose the following APIs POST /track/start/:stateMachineId { \"typeName\" : \"todo\" , \"referenceId\" : \"objectId\" } # Start tracking a particular object by id This returns a state machine id. POST /track/event/:typename/:objectStateMachineId/:eventName {} # Trigger event on current state This either moves the object state to next state, or fails on invalid event name. State machine A state machine is a description of \"states\" which the object can be in, and list of all valid transitions from one state to another. Let us begin with an example: The following JSON defines a state machine which has (a hypothetical state machine for tracking todos): Initial state: to_be_done List of valid states: to_be_done, delayed, started, ongoing, interrupted, completed List of valid transitions, giving name to each event { \"Name\" : \"task_status\" , \"Label\" : \"Task Status\" , \"InitialState\" : \"to_be_done\" , \"Events\" : [{ \"Name\" : \"start\" , \"Label\" : \"Start\" , \"Src\" : [ \"to_be_done\" , \"delayed\" ], \"Dst\" : \"started\" }, { \"Name\" : \"delayed\" , \"Label\" : \"Unable to pick up\" , \"Src\" : [ \"to_be_done\" ], \"Dst\" : \"delayed\" }, { \"Name\" : \"ongoing\" , \"Label\" : \"Record progress\" , \"Src\" : [ \"started\" , \"ongoing\" ], \"Dst\" : \"ongoing\" }, { \"Name\" : \"interrupted\" , \"Label\" : \"Interrupted\" , \"Src\" : [ \"started\" , \"ongoing\" ], \"Dst\" : \"interrupted\" }, { \"Name\" : \"resume\" , \"Label\" : \"Resume from interruption\" , \"Src\" : [ \"interrupted\" ], \"Dst\" : \"ongoing\" }, { \"Name\" : \"completed\" , \"Label\" : \"Mark as completed\" , \"Src\" : [ \"ongoing\" , \"started\" ], \"Dst\" : \"completed\" } ] } State machines can be uploaded to Daptin just like entities and actions. A JSON/YAML file with a StateMachineDescriptions top level key can contain an array of state machine descriptions. REST API Start tracking an object by state machine reference id Request POST /track/start/:stateMachineId {\"typeName\": <entityTypeName>, \"referenceId\": <ReferenceIdOfTheObject> } Response \"current_state\": <InitialStateOfTheStateMachine> \"<typename>_smd\": <ObjectStateInstanceReferenceId> \"is_state_of_<typename>\" = <ObjectInstanceId> \"permission\": <AuthPermission> Trigger an event by name in the state of an object POST /track/event/:typename/:ObjectStateInstanceReferenceId/:eventName Response \"current_state\": <NewStateAfterEvent> \"<typename>_smd\": <ObjectStateInstanceReferenceId> \"is_state_of_<typename>\" = <ObjectInstanceId> Enabling state tracking for entity Begin with marking an entity as trackable. To do this, go to the world tables page and edit the an entity Check the \"Is state tracking enabled\" checkbox This \"is_state_tracking_enabled\" options tells daptin to create the associated state table for the entity. Even though we have not yet specified which state machines are available for this entity. To make a state machine available for an entity, go to the \"SMD\" tab of this entity on the same page and add the state machine by searching it by name and adding it. It would not make a lot of sense if the above state machine was allowed for all type of entities.","title":"State tracking"},{"location":"state/machines/#state-tracking","text":"State of an object can help you tracing any sort of progress while making sure you maintain the consistence of the state. For eg, you might want to track the status of a \"blog post\" in terms of \"draft\"/\"edited\"/\"published\" which pre-defined endpoints defining the flow of states. Tracking the status of things is one of the most common operation in most business flows. Daptin has a native support for state tracking and allows a lot of convienent features.","title":"State tracking"},{"location":"state/machines/#defining-a-state-machine","text":"Define a state machine in YAML or JSON as follows: State machine description YAML StateMachineDescriptions : - Name : task_status Label : Task Status InitialState : to_be_done Events : - Name : start Label : Start Src : - to_be_done - delayed Dst : started - Name : delayed Label : Unable to pick up Src : - to_be_done Dst : delayed - Name : ongoing Label : Record progress Src : - started - ongoing Dst : ongoing - Name : interrupted Label : Interrupted Src : - started - ongoing Dst : interrupted - Name : resume Label : Resume from interruption Src : - interrupted Dst : ongoing - Name : completed Label : Mark as completed Src : - ongoing - started Dst : completed Using state machine descriptions with daptin expose couple of super useful apis to manage state based data. Enabling task_status state machine on todo entity will expose the following APIs POST /track/start/:stateMachineId { \"typeName\" : \"todo\" , \"referenceId\" : \"objectId\" } # Start tracking a particular object by id This returns a state machine id. POST /track/event/:typename/:objectStateMachineId/:eventName {} # Trigger event on current state This either moves the object state to next state, or fails on invalid event name.","title":"Defining a state machine"},{"location":"state/machines/#state-machine","text":"A state machine is a description of \"states\" which the object can be in, and list of all valid transitions from one state to another. Let us begin with an example: The following JSON defines a state machine which has (a hypothetical state machine for tracking todos): Initial state: to_be_done List of valid states: to_be_done, delayed, started, ongoing, interrupted, completed List of valid transitions, giving name to each event { \"Name\" : \"task_status\" , \"Label\" : \"Task Status\" , \"InitialState\" : \"to_be_done\" , \"Events\" : [{ \"Name\" : \"start\" , \"Label\" : \"Start\" , \"Src\" : [ \"to_be_done\" , \"delayed\" ], \"Dst\" : \"started\" }, { \"Name\" : \"delayed\" , \"Label\" : \"Unable to pick up\" , \"Src\" : [ \"to_be_done\" ], \"Dst\" : \"delayed\" }, { \"Name\" : \"ongoing\" , \"Label\" : \"Record progress\" , \"Src\" : [ \"started\" , \"ongoing\" ], \"Dst\" : \"ongoing\" }, { \"Name\" : \"interrupted\" , \"Label\" : \"Interrupted\" , \"Src\" : [ \"started\" , \"ongoing\" ], \"Dst\" : \"interrupted\" }, { \"Name\" : \"resume\" , \"Label\" : \"Resume from interruption\" , \"Src\" : [ \"interrupted\" ], \"Dst\" : \"ongoing\" }, { \"Name\" : \"completed\" , \"Label\" : \"Mark as completed\" , \"Src\" : [ \"ongoing\" , \"started\" ], \"Dst\" : \"completed\" } ] } State machines can be uploaded to Daptin just like entities and actions. A JSON/YAML file with a StateMachineDescriptions top level key can contain an array of state machine descriptions.","title":"State machine"},{"location":"state/machines/#rest-api","text":"","title":"REST API"},{"location":"state/machines/#start-tracking-an-object-by-state-machine-reference-id","text":"Request POST /track/start/:stateMachineId {\"typeName\": <entityTypeName>, \"referenceId\": <ReferenceIdOfTheObject> } Response \"current_state\": <InitialStateOfTheStateMachine> \"<typename>_smd\": <ObjectStateInstanceReferenceId> \"is_state_of_<typename>\" = <ObjectInstanceId> \"permission\": <AuthPermission>","title":"Start tracking an object by state machine reference id"},{"location":"state/machines/#trigger-an-event-by-name-in-the-state-of-an-object","text":"POST /track/event/:typename/:ObjectStateInstanceReferenceId/:eventName Response \"current_state\": <NewStateAfterEvent> \"<typename>_smd\": <ObjectStateInstanceReferenceId> \"is_state_of_<typename>\" = <ObjectInstanceId>","title":"Trigger an event by name in the state of an object"},{"location":"state/machines/#enabling-state-tracking-for-entity","text":"Begin with marking an entity as trackable. To do this, go to the world tables page and edit the an entity Check the \"Is state tracking enabled\" checkbox This \"is_state_tracking_enabled\" options tells daptin to create the associated state table for the entity. Even though we have not yet specified which state machines are available for this entity. To make a state machine available for an entity, go to the \"SMD\" tab of this entity on the same page and add the state machine by searching it by name and adding it. It would not make a lot of sense if the above state machine was allowed for all type of entities.","title":"Enabling state tracking for entity"},{"location":"streams/streams/","text":"Streams Streams are complimentary to actions . Think of streams as views in SQL. A stream is basically one entity + set of transformations and filters on the entity. Streams are read-only and exposed with similar semantics of that of entities. Daptin will expose JSONAPI for each stream just like it does for entities. Here is an example of a stream which exposes list of completed todos only { StreamName: \"transformed_user\", RootEntityName: \"todo\", Columns: []api2go.ColumnInfo{ // List of columns in this stream { Name: \"transformed_todo_title\", ColumnType: \"label\", }, { Name: \"completed_on\", ColumnType: \"datetime\", }, }, QueryParams: QueryParams{ \"Filter\": \"completed=true\", \"Select\": \"title,deadline\", }, Transformations: []Transformation{ { Operation: \"select\", Attributes: map[string]interface{}{ \"columns\": []string{\"title\", \"deadline\"}, }, }, { Operation: \"rename\", Attributes: map[string]interface{}{ \"oldName\": \"title\", \"newName\": \"transformed_todo_title\", }, }, { Operation: \"rename\", Attributes: map[string]interface{}{ \"oldName\": \"deadline\", \"newName\": \"completed_on\", }, }, }, } Daptin uses the library kniren/gota to systematically specific list of transformations which are applied to the original data stream.","title":"Data streams"},{"location":"streams/streams/#streams","text":"Streams are complimentary to actions . Think of streams as views in SQL. A stream is basically one entity + set of transformations and filters on the entity. Streams are read-only and exposed with similar semantics of that of entities. Daptin will expose JSONAPI for each stream just like it does for entities. Here is an example of a stream which exposes list of completed todos only { StreamName: \"transformed_user\", RootEntityName: \"todo\", Columns: []api2go.ColumnInfo{ // List of columns in this stream { Name: \"transformed_todo_title\", ColumnType: \"label\", }, { Name: \"completed_on\", ColumnType: \"datetime\", }, }, QueryParams: QueryParams{ \"Filter\": \"completed=true\", \"Select\": \"title,deadline\", }, Transformations: []Transformation{ { Operation: \"select\", Attributes: map[string]interface{}{ \"columns\": []string{\"title\", \"deadline\"}, }, }, { Operation: \"rename\", Attributes: map[string]interface{}{ \"oldName\": \"title\", \"newName\": \"transformed_todo_title\", }, }, { Operation: \"rename\", Attributes: map[string]interface{}{ \"oldName\": \"deadline\", \"newName\": \"completed_on\", }, }, }, } Daptin uses the library kniren/gota to systematically specific list of transformations which are applied to the original data stream.","title":"Streams"},{"location":"subsite/basic_auth/","text":"Protecting subsites from guests In addition to existing JWT based authentication, you can enable basic-auth over subsites since it is the quickest way to add authencation and doesn't require any action from end-users perspective apart from knowing the username and password. Also Basic auth is understood by a wide variety of browsers natively.","title":"Basic Authentication"},{"location":"subsite/basic_auth/#protecting-subsites-from-guests","text":"In addition to existing JWT based authentication, you can enable basic-auth over subsites since it is the quickest way to add authencation and doesn't require any action from end-users perspective apart from knowing the username and password. Also Basic auth is understood by a wide variety of browsers natively.","title":"Protecting subsites from guests"},{"location":"subsite/grapes/","text":"GrapesJS Todo: add documentation around live website editing","title":"Live editing a subsite"},{"location":"subsite/grapes/#grapesjs","text":"Todo: add documentation around live website editing","title":"GrapesJS"},{"location":"subsite/subsite/","text":"Sub site You can host multiple sites using daptin. A sub site is exposing a cloud storage folder statically under a sub-domain, domain or a path. Expose folders on cloud storage services as websites using your daptin instance. New subsite Select a cloud storage Choose a domain/sub-domain Choose a sub-path Restart is required to reflect changes. Creating a new sub-site Exposing a folder as a subsite Goto dashboard https://dashboard.domain.com/ Click \"Sub sites\" Click the green \"+\" icon Type in the hostname this should be exposed to this can be a domain or a sub-domain the domain should be pointing to the daptin instance Choose a name Path : select a sub directory name to expose this sub-site. Your sub-site will be accessible at domain.com/ Cloud store Id : choose an existing cloud store . Restart to enable serving the site. Daptin will sync the cloud store locally and start serving it under the domain/path.","title":"Creating a subsite"},{"location":"subsite/subsite/#sub-site","text":"You can host multiple sites using daptin. A sub site is exposing a cloud storage folder statically under a sub-domain, domain or a path. Expose folders on cloud storage services as websites using your daptin instance. New subsite Select a cloud storage Choose a domain/sub-domain Choose a sub-path Restart is required to reflect changes.","title":"Sub site"},{"location":"subsite/subsite/#creating-a-new-sub-site","text":"Exposing a folder as a subsite Goto dashboard https://dashboard.domain.com/ Click \"Sub sites\" Click the green \"+\" icon Type in the hostname this should be exposed to this can be a domain or a sub-domain the domain should be pointing to the daptin instance Choose a name Path : select a sub directory name to expose this sub-site. Your sub-site will be accessible at domain.com/ Cloud store Id : choose an existing cloud store . Restart to enable serving the site. Daptin will sync the cloud store locally and start serving it under the domain/path.","title":"Creating a new sub-site"},{"location":"tables/","text":"Tables Note Click the wrench icon to edit table definition page. Tables are the basic building objects in Daptin. Table has a name, list of fields/columns and relations to other tables. Note Clicking on the row will take you to the data browser page.","title":"Tables"},{"location":"tables/#tables","text":"Note Click the wrench icon to edit table definition page. Tables are the basic building objects in Daptin. Table has a name, list of fields/columns and relations to other tables. Note Clicking on the row will take you to the data browser page.","title":"Tables"},{"location":"tables/create/","text":"Create table","title":"Create table"},{"location":"tables/create/#create-table","text":"","title":"Create table"},{"location":"user-management/access/","text":"Guests Requests without a valid Authorization Bearer token will be referred to as \"guests requests\". Requests with a valid token will have an identified user in the context. Authorization Daptin has a built-in authorization framework based on users groups and permissions. Users are identified by their authorization token or other means of identification. Each request is identified as coming from a registered user or a guest. Permission model Every read/write to the system passes through two level of permission check. Type level: apply permission on all types of entities at the same time Data level: object level permission The world table contains two columns: Permission : defines the entity level permission Default permission : defines the default permission for a new object of this entity type The default permission for an object is picked from the default permission setting, and can be changed after the object creation (if the permission allows). Permission Bits None: 0, GuestPeek: 1 << 0, GuestRead: 1 << 1, GuestCreate: 1 << 2, GuestUpdate: 1 << 3, GuestDelete: 1 << 4, GuestExecute: 1 << 5, GuestRefer: 1 << 6, UserPeek: 1 << 7, UserRead: 1 << 8, UserCreate: 1 << 9, UserUpdate: 1 << 10, UserDelete: 1 << 11, UserExecute: 1 << 12, UserRefer: 1 << 13, GroupPeek: 1 << 14, GroupRead: 1 << 15, GroupCreate: 1 << 16, GroupUpdate: 1 << 17, GroupDelete: 1 << 18, GroupExecute: 1 << 19, GroupRefer: 1 << 20, OR the desired permission bits to get the final permission column value. Example DEFAULT_PERMISSION = GuestPeek | GuestExecute | UserCRUD | UserExecute | GroupCRUD | GroupExecute Authorization Authorization is the part where daptin decides if the caller has enough permission to execute the call. Access check happens at two levels: Entity level check Object level check Both the checks have a \"before\" and \"after\" part. Object level permission check Once the call clears the entity level check, an object level permission check is applied. This happens in cases where the action is going to affect/read an existing row. The permission is stored in the same way. Each table has a permission column which stores the permission in OOOGGGXXX format. Order of permission check The permission is checked in order of: Check if the user is owner, if yes, check if permission allows the current action, if yes do action Check if the user belongs to a group to which this object also belongs, if yes, check if permisison allows the current action, if yes do action User is guest, check if guest permission allows this actions, if yes do action, if no, unauthorized Things to note here: There is no negative permission (this may be introduced in the future) eg, you cannot say owner is 'not allowed' to read but read by guest is allowed. Permission check is done in a hierarchy type order Access flow Every \"interaction\" in daptin goes through two levels of access. Each level has a before and after check. Entity level access: does the user invoking the interaction has the appropriate permission to invoke this (So for sign up, the user table need to be writable by guests, for sign in the user table needs to be peakable by guests) Instance level access: this is the second level, even if a User Account has access to \"user\" entity, not all \"user\" rows would be accessible by them So the actual checks happen in following order: \"Before check\" for entity \"Before check\" for instance \"After check\" for instance \"After check\" for entity Each of these checks can filter out objects where the user does not have enough permission. Entity level permission Entity level permission are set in the world table and can be updated from dashboard. This can be done by updating the \"permission\" column for the entity. For these changes to take effect a restart is necessary. Instance level permission Like we saw in the entity documentation , every table has a permission column. No restart is necessary for changes in these permission. You can choose to disable new user registration by changing the signup action permissions. User data API Examples Users are just like any other data you maintain. User information is stored in the user_account table and exposed over /api/user_account endpoint. You can choose to allow read/write permission directly to that table to allow other users/processes to use this api to read/create/update/delete users. User groups User groups is a group concept that helps you manage \"who\" can interact with daptin, and in what ways. All objects (including users and groups) belong to one or more user group. Users can interact with objects which also belong to their group based on the defined group permission setting Social login Oauth connection can be used to allow guests to identify themselves based on the email provided by the oauth id provider. Social login Allow users to login using their existing social accounts like twitter/google/github. Daptin can work with any oauth flow aware identity provider to allow new users to be registered (if you have disabled normal signup). Create a OAuth Connection and mark \"Allow login\" to enable APIs for OAuth flow. Examples Google login configuration Dropbox login configuration Github login configuration Linkedin login configuration Encrypted values The secrets are stored after encryption so the value you see in above screenshots are encrypted values. Configuring default user group You can configure which User groups should newly registered users be added to after their signup. This can be configured in the table properties from the dashboard or by updating the entity configuration from the API Resync required Resync action is required to be called for default group settings to take effect Authentication token The authentication token is a JWT token issued by daptin on sign in action. Users can create new actions to allow other means of generating JWT token. It is as simple as adding another outcome to an action. Server side Daptin uses OAuth 2 based authentication strategy. HTTP calls are checked for Authorization header, and if present, validated as a JWT token. The JWT token should have been issued by daptin earlier and should not have expired. To see how to generate JWT token, checkout the sing-in action . The JWT token contains the issuer information (daptin) plus basic user profile (email). The JWT token has a one hour (configurable) expiry from the time of issue. If the token is absent or invalid, the user is considered as a guest. Guests also have certain permissions. Checkout the Authorization docs for details. Client side On the client side, for dashboard, the token is stored in local storage. The local storage is cleared on logout or if the server responds with a 401 Unauthorized status.","title":"Access Permissions"},{"location":"user-management/access/#guests","text":"Requests without a valid Authorization Bearer token will be referred to as \"guests requests\". Requests with a valid token will have an identified user in the context.","title":"Guests"},{"location":"user-management/access/#authorization","text":"Daptin has a built-in authorization framework based on users groups and permissions. Users are identified by their authorization token or other means of identification. Each request is identified as coming from a registered user or a guest.","title":"Authorization"},{"location":"user-management/access/#permission-model","text":"Every read/write to the system passes through two level of permission check. Type level: apply permission on all types of entities at the same time Data level: object level permission The world table contains two columns: Permission : defines the entity level permission Default permission : defines the default permission for a new object of this entity type The default permission for an object is picked from the default permission setting, and can be changed after the object creation (if the permission allows).","title":"Permission model"},{"location":"user-management/access/#permission-bits","text":"None: 0, GuestPeek: 1 << 0, GuestRead: 1 << 1, GuestCreate: 1 << 2, GuestUpdate: 1 << 3, GuestDelete: 1 << 4, GuestExecute: 1 << 5, GuestRefer: 1 << 6, UserPeek: 1 << 7, UserRead: 1 << 8, UserCreate: 1 << 9, UserUpdate: 1 << 10, UserDelete: 1 << 11, UserExecute: 1 << 12, UserRefer: 1 << 13, GroupPeek: 1 << 14, GroupRead: 1 << 15, GroupCreate: 1 << 16, GroupUpdate: 1 << 17, GroupDelete: 1 << 18, GroupExecute: 1 << 19, GroupRefer: 1 << 20, OR the desired permission bits to get the final permission column value. Example DEFAULT_PERMISSION = GuestPeek | GuestExecute | UserCRUD | UserExecute | GroupCRUD | GroupExecute","title":"Permission Bits"},{"location":"user-management/access/#authorization_1","text":"Authorization is the part where daptin decides if the caller has enough permission to execute the call. Access check happens at two levels: Entity level check Object level check Both the checks have a \"before\" and \"after\" part.","title":"Authorization"},{"location":"user-management/access/#object-level-permission-check","text":"Once the call clears the entity level check, an object level permission check is applied. This happens in cases where the action is going to affect/read an existing row. The permission is stored in the same way. Each table has a permission column which stores the permission in OOOGGGXXX format.","title":"Object level permission check"},{"location":"user-management/access/#order-of-permission-check","text":"The permission is checked in order of: Check if the user is owner, if yes, check if permission allows the current action, if yes do action Check if the user belongs to a group to which this object also belongs, if yes, check if permisison allows the current action, if yes do action User is guest, check if guest permission allows this actions, if yes do action, if no, unauthorized Things to note here: There is no negative permission (this may be introduced in the future) eg, you cannot say owner is 'not allowed' to read but read by guest is allowed. Permission check is done in a hierarchy type order","title":"Order of permission check"},{"location":"user-management/access/#access-flow","text":"Every \"interaction\" in daptin goes through two levels of access. Each level has a before and after check. Entity level access: does the user invoking the interaction has the appropriate permission to invoke this (So for sign up, the user table need to be writable by guests, for sign in the user table needs to be peakable by guests) Instance level access: this is the second level, even if a User Account has access to \"user\" entity, not all \"user\" rows would be accessible by them So the actual checks happen in following order: \"Before check\" for entity \"Before check\" for instance \"After check\" for instance \"After check\" for entity Each of these checks can filter out objects where the user does not have enough permission.","title":"Access flow"},{"location":"user-management/access/#entity-level-permission","text":"Entity level permission are set in the world table and can be updated from dashboard. This can be done by updating the \"permission\" column for the entity. For these changes to take effect a restart is necessary.","title":"Entity level permission"},{"location":"user-management/access/#instance-level-permission","text":"Like we saw in the entity documentation , every table has a permission column. No restart is necessary for changes in these permission. You can choose to disable new user registration by changing the signup action permissions.","title":"Instance level permission"},{"location":"user-management/access/#user-data-api-examples","text":"Users are just like any other data you maintain. User information is stored in the user_account table and exposed over /api/user_account endpoint. You can choose to allow read/write permission directly to that table to allow other users/processes to use this api to read/create/update/delete users.","title":"User data API Examples"},{"location":"user-management/access/#user-groups","text":"User groups is a group concept that helps you manage \"who\" can interact with daptin, and in what ways. All objects (including users and groups) belong to one or more user group. Users can interact with objects which also belong to their group based on the defined group permission setting","title":"User groups"},{"location":"user-management/access/#social-login","text":"Oauth connection can be used to allow guests to identify themselves based on the email provided by the oauth id provider.","title":"Social login"},{"location":"user-management/access/#social-login_1","text":"Allow users to login using their existing social accounts like twitter/google/github. Daptin can work with any oauth flow aware identity provider to allow new users to be registered (if you have disabled normal signup). Create a OAuth Connection and mark \"Allow login\" to enable APIs for OAuth flow. Examples Google login configuration Dropbox login configuration Github login configuration Linkedin login configuration Encrypted values The secrets are stored after encryption so the value you see in above screenshots are encrypted values.","title":"Social login"},{"location":"user-management/access/#configuring-default-user-group","text":"You can configure which User groups should newly registered users be added to after their signup. This can be configured in the table properties from the dashboard or by updating the entity configuration from the API Resync required Resync action is required to be called for default group settings to take effect","title":"Configuring default user group"},{"location":"user-management/access/#authentication-token","text":"The authentication token is a JWT token issued by daptin on sign in action. Users can create new actions to allow other means of generating JWT token. It is as simple as adding another outcome to an action.","title":"Authentication token"},{"location":"user-management/access/#server-side","text":"Daptin uses OAuth 2 based authentication strategy. HTTP calls are checked for Authorization header, and if present, validated as a JWT token. The JWT token should have been issued by daptin earlier and should not have expired. To see how to generate JWT token, checkout the sing-in action . The JWT token contains the issuer information (daptin) plus basic user profile (email). The JWT token has a one hour (configurable) expiry from the time of issue. If the token is absent or invalid, the user is considered as a guest. Guests also have certain permissions. Checkout the Authorization docs for details.","title":"Server side"},{"location":"user-management/access/#client-side","text":"On the client side, for dashboard, the token is stored in local storage. The local storage is cleared on logout or if the server responds with a 401 Unauthorized status.","title":"Client side"},{"location":"user-management/new-users/","text":"Sign Up Action Sign up is an action on user entity. Sign up takes four inputs: Name Email Password PasswordConfirm When the user initiates a Sign up action, the following things happen Check if guests can initiate sign in action Check if guests can create a new user (create permission) Create a new user row Check if guests can create a new usergroup (create permission) Create a new usergroup row Associate the user to the usergroup (refer permission) This means that every user has his own dedicated user group by default. Curl Example curl 'http://localhost:6336/action/user_account/signup' -H 'Content-Type: application/json;charset=utf-8' --data-raw '{\"attributes\":{\"email\":\"email@host.com\",\"password\":\"password\",\"name\":\"name\",\"passwordConfirm\":\"password\"}}' Sign Up Action Permissions First you need to fetch the available actions curl -H \"Authorization: Bearer <token>\" 'http://localhost:6336/api/action' | python -m json.tool More specifically you are looking for the signup action curl -H \"Authorization: Bearer <token>\" 'http://localhost:6336/api/action?filter=signup' | python -m json.tool Note the reference id of the signup action in the response, we need it to update its permission curl 'http://localhost:6336/api/action/<reference_id>' \\ -X PATCH \\ -H 'Content-Type: application/vnd.api+json' \\ -H 'Authorization: Bearer <token>' \\ --data-raw '{\"data\":{\"type\":\"action\",\"attributes\":{\"permission\":\"2097057\"},\"id\":\"<reference_id>\"},\"meta\":{}}' Note that the ` reference_id ` is in two places there. #### Permission Disable for guests: 2097025 Enable for guests: 2097057 ## New user from CRUD API Users can be created by directly create an entry in the ` user_account ` table. Creating a user manually curl '/api/user_account' \\ -H 'Authorization: Bearer ' \\ --data-binary '{ \"data\": { \"type\": \"user_account\", \"attributes\": { \"email\": \" test@user.com \", \"name\": \"test\", \"password\": \"password\", } } }' ```","title":"New User"},{"location":"user-management/new-users/#sign-up-action","text":"Sign up is an action on user entity. Sign up takes four inputs: Name Email Password PasswordConfirm When the user initiates a Sign up action, the following things happen Check if guests can initiate sign in action Check if guests can create a new user (create permission) Create a new user row Check if guests can create a new usergroup (create permission) Create a new usergroup row Associate the user to the usergroup (refer permission) This means that every user has his own dedicated user group by default.","title":"Sign Up Action"},{"location":"user-management/new-users/#curl-example","text":"curl 'http://localhost:6336/action/user_account/signup' -H 'Content-Type: application/json;charset=utf-8' --data-raw '{\"attributes\":{\"email\":\"email@host.com\",\"password\":\"password\",\"name\":\"name\",\"passwordConfirm\":\"password\"}}'","title":"Curl Example"},{"location":"user-management/new-users/#sign-up-action-permissions","text":"First you need to fetch the available actions curl -H \"Authorization: Bearer <token>\" 'http://localhost:6336/api/action' | python -m json.tool More specifically you are looking for the signup action curl -H \"Authorization: Bearer <token>\" 'http://localhost:6336/api/action?filter=signup' | python -m json.tool Note the reference id of the signup action in the response, we need it to update its permission curl 'http://localhost:6336/api/action/<reference_id>' \\ -X PATCH \\ -H 'Content-Type: application/vnd.api+json' \\ -H 'Authorization: Bearer <token>' \\ --data-raw '{\"data\":{\"type\":\"action\",\"attributes\":{\"permission\":\"2097057\"},\"id\":\"<reference_id>\"},\"meta\":{}}' Note that the ` reference_id ` is in two places there. #### Permission Disable for guests: 2097025 Enable for guests: 2097057 ## New user from CRUD API Users can be created by directly create an entry in the ` user_account ` table. Creating a user manually curl '/api/user_account' \\ -H 'Authorization: Bearer ' \\ --data-binary '{ \"data\": { \"type\": \"user_account\", \"attributes\": { \"email\": \" test@user.com \", \"name\": \"test\", \"password\": \"password\", } } }' ```","title":"Sign Up Action Permissions"},{"location":"user-management/signin/","text":"Sign In Sign In is an action on user entity. Sign in takes two inputs: Email Password When the user initiates Sign in action, the following things happen: Check if guests can peek users table (Peek permission) Check if guests can peek the particular user (Peek Permission) Match if the provided password bcrypted matches the stored bcrypted password If true, issue a JWT token, which is used for future calls The main outcome of the Sign In action is the jwt token, which is to be used in the Authorization header of following calls. Sign in CURL example POST call for sign in curl 'http://localhost:6336/action/user_account/signin' \\ -H 'Content-Type: application/json;charset=UTF-8' \\ -H 'Accept: application/json, text/plain, */*' \\ --data-binary '{\"attributes\":{\"email\":\"<Email>\",\"password\":\"<Password>\"}}' [ { \"ResponseType\" : \"client.store.set\" , \"Attributes\" : { \"key\" : \"token\" , \"value\" : \"<AccessToken>\" } }, { \"ResponseType\" : \"client.notify\" , \"Attributes\" : { \"message\" : \"Logged in\" , \"title\" : \"Success\" , \"type\" : \"success\" } }, { \"ResponseType\" : \"client.redirect\" , \"Attributes\" : { \"delay\" : 2000 , \"location\" : \"/\" , \"window\" : \"self\" } } ]","title":"Sign in API"},{"location":"user-management/signin/#sign-in","text":"Sign In is an action on user entity. Sign in takes two inputs: Email Password When the user initiates Sign in action, the following things happen: Check if guests can peek users table (Peek permission) Check if guests can peek the particular user (Peek Permission) Match if the provided password bcrypted matches the stored bcrypted password If true, issue a JWT token, which is used for future calls The main outcome of the Sign In action is the jwt token, which is to be used in the Authorization header of following calls.","title":"Sign In"},{"location":"user-management/signin/#sign-in-curl-example","text":"POST call for sign in curl 'http://localhost:6336/action/user_account/signin' \\ -H 'Content-Type: application/json;charset=UTF-8' \\ -H 'Accept: application/json, text/plain, */*' \\ --data-binary '{\"attributes\":{\"email\":\"<Email>\",\"password\":\"<Password>\"}}' [ { \"ResponseType\" : \"client.store.set\" , \"Attributes\" : { \"key\" : \"token\" , \"value\" : \"<AccessToken>\" } }, { \"ResponseType\" : \"client.notify\" , \"Attributes\" : { \"message\" : \"Logged in\" , \"title\" : \"Success\" , \"type\" : \"success\" } }, { \"ResponseType\" : \"client.redirect\" , \"Attributes\" : { \"delay\" : 2000 , \"location\" : \"/\" , \"window\" : \"self\" } } ]","title":"Sign in CURL example"},{"location":"users/","text":"Users List of user accounts. Create more account, edit account details or delete accounts here.","title":"Users"},{"location":"users/#users","text":"List of user accounts. Create more account, edit account details or delete accounts here.","title":"Users"},{"location":"websockets/websocket/","text":"Websockets Clients can connect to a websocket endpoint Endpoint ws://localhost:6336/live?token=<auth_token> !note WSS Use wss:// if you have enabled SSL Client request payload structure { \"method\" : \"\" , // o ne o f lis t - t opic , crea te - t opic , des tr oy - t opic , subscribe , u nsu bscribe , ne w - message \"type\" : \"\" , // required whe n me t hod is subscribe \"payload\" : {} // a ttr ibu tes depe n di n g o n t he me t hod } Websocket requests List topics List all the available topics - System topics - User created topics { \"method\" : \"list-topic\" } Sample Response { \"MessageSource\" : \"system\" , \"EventType\" : \"response\" , \"ObjectType\" : \"topic-list\" , \"EventData\" : { \"topics\" : [ \"task_task_id_has_usergroup_usergroup_id\" , \"timeline\" , \"application\" , \"json_schema_json_schema_id_has_usergroup_usergroup_id\" , \"plan_plan_id_has_usergroup_usergroup_id\" , \"mail_account\" , \"stream\" , \"user_otp_account\" , \"outbox_outbox_id_has_usergroup_usergroup_id\" , \"oauth_token_oauth_token_id_has_usergroup_usergroup_id\" , \"stream_stream_id_has_usergroup_usergroup_id\" , \"deployment_deployment_id_has_usergroup_usergroup_id\" , \"feed_feed_id_has_usergroup_usergroup_id\" , \"smd_smd_id_has_usergroup_usergroup_id\" , \"site_site_id_has_usergroup_usergroup_id\" , \"timeline_timeline_id_has_usergroup_usergroup_id\" , \"tab_eygurbe\" , \"screen_screen_id_has_usergroup_usergroup_id\" , \"mail_server\" , \"certificate\" , \"data_exchange\" , \"document_document_id_has_usergroup_usergroup_id\" , \"oauth_token\" , \"calendar_calendar_id_has_usergroup_usergroup_id\" , \"tab_nuqymzy\" , \"outbox\" , \"screen\" , \"integration_integration_id_has_usergroup_usergroup_id\" , \"oauth_connect\" , \"user_payment_user_payment_id_has_usergroup_usergroup_id\" , \"mail\" , \"world\" , \"mail_account_mail_account_id_has_usergroup_usergroup_id\" , \"mail_box\" , \"world_world_id_has_usergroup_usergroup_id\" , \"user_account_user_account_id_has_usergroup_usergroup_id\" , \"tab_nuqymzy_tab_nuqymzy_id_has_usergroup_usergroup_id\" , \"calendar\" , \"smd\" , \"user_payment\" , \"action\" , \"task\" , \"site\" , \"integration\" , \"starter_app_starter_app_id_has_usergroup_usergroup_id\" , \"plan\" , \"usergroup\" , \"tab_eygurbe_tab_eygurbe_id_has_usergroup_usergroup_id\" , \"deployment\" , \"starter_app\" , \"json_schema\" , \"user_otp_account_user_otp_account_id_has_usergroup_usergroup_id\" , \"feed\" , \"cloud_store_cloud_store_id_has_usergroup_usergroup_id\" , \"world_world_id_has_smd_smd_id\" , \"certificate_certificate_id_has_usergroup_usergroup_id\" , \"mail_mail_id_has_usergroup_usergroup_id\" , \"action_action_id_has_usergroup_usergroup_id\" , \"data_exchange_data_exchange_id_has_usergroup_usergroup_id\" , \"user_account\" , \"application_application_id_has_usergroup_usergroup_id\" , \"document\" , \"oauth_connect_oauth_connect_id_has_usergroup_usergroup_id\" , \"cloud_store\" , \"mail_server_mail_server_id_has_usergroup_usergroup_id\" , \"mail_box_mail_box_id_has_usergroup_usergroup_id\" ] } } Create topic Create a new topic { \"method\" : \"create-topic\" , \"attributes\" : { \"name\" : \"<new_topic_name>\" } } Destroy topic Delete a user created topic { \"method\" : \"destroy-topic\" , \"attributes\" : { \"name\" : \"<topic_name>\" } } Subscribe topic Listen to create/update/delete events in any table { \"method\" : \"subscribe\" , \"attributes\" : { \"topic\" : \"user_account\" } } Create event sample payload { \"MessageSource\" : \"database\" , \"EventType\" : \"create\" , \"ObjectType\" : \"user_account\" , \"EventData\" : { \"__type\" : \"user_account\" , \"confirmed\" : false , \"created_at\" : \"2021-03-13T13:47:07.954634Z\" , \"email\" : \"asdf@asfd.cm\" , \"name\" : \"asdf\" , \"password\" : \"$2a$11$HbH5o1s6ThsMJ9ft/.uljO9.T.od/tR0RFtep50Ef5mzymI6kNlW.\" , \"permission\" : 2097057 , \"reference_id\" : \"004cc6b6-8b9b-4d51-936a-128133b21d04\" , \"updated_at\" : null , \"user_account_id\" : \"ee655e01-98a5-4761-bc93-b7a15e2b5847\" , \"version\" : 1 } } Update event sample payload { \"MessageSource\" : \"database\" , \"EventType\" : \"update\" , \"ObjectType\" : \"user_account\" , \"EventData\" : { \"__type\" : \"user_account\" , \"confirmed\" : false , \"created_at\" : \"2021-03-13T13:47:07.954634Z\" , \"email\" : \"asdf@asfd.cm\" , \"name\" : \"asdf\" , \"password\" : \"$2a$11$U83vQU5A3Xq2Gcphb52XOej8H9p1GbFKerpkoSesbx674qZfBjJdu\" , \"permission\" : 2097057 , \"reference_id\" : \"004cc6b6-8b9b-4d51-936a-128133b21d04\" , \"updated_at\" : \"2021-03-13T13:48:21.258962Z\" , \"user_account_id\" : \"ee655e01-98a5-4761-bc93-b7a15e2b5847\" , \"version\" : 2 } } Subscribe with filters { \"method\" : \"subscribe\" , \"attributes\" : { \"topic\" : \"user_account\" , \"filters\" : { // f il ter o n t ype o f eve nt : crea te /upda te /dele te \"EventType\" : \"update\" , // f il ter o n colum n da ta , rows wi t h u n ma t ched colum n value will n o t be se nt \"<column_name>\" : \"<filter_value>\" } } } Unsubscribe topic Unsubscribe to an subscribed topic (this is required if you want to subscribe with new filters) { \"method\" : \"unsubscribe\" , \"attributes\" : { \"topic\" : \"<topic_name>\" } } New message for a user-created topic Send a message on a user created topic, broad-casted to all subscribers of this topic { \"method\" : \"new-message\" , \"attributes\" : { \"topic\" : \"test\" , \"message\" : { \"hello\" : \"world\" } } }","title":"Websockets"},{"location":"websockets/websocket/#websockets","text":"Clients can connect to a websocket endpoint Endpoint ws://localhost:6336/live?token=<auth_token> !note WSS Use wss:// if you have enabled SSL Client request payload structure { \"method\" : \"\" , // o ne o f lis t - t opic , crea te - t opic , des tr oy - t opic , subscribe , u nsu bscribe , ne w - message \"type\" : \"\" , // required whe n me t hod is subscribe \"payload\" : {} // a ttr ibu tes depe n di n g o n t he me t hod }","title":"Websockets"},{"location":"websockets/websocket/#websocket-requests","text":"","title":"Websocket requests"},{"location":"websockets/websocket/#list-topics","text":"List all the available topics - System topics - User created topics { \"method\" : \"list-topic\" } Sample Response { \"MessageSource\" : \"system\" , \"EventType\" : \"response\" , \"ObjectType\" : \"topic-list\" , \"EventData\" : { \"topics\" : [ \"task_task_id_has_usergroup_usergroup_id\" , \"timeline\" , \"application\" , \"json_schema_json_schema_id_has_usergroup_usergroup_id\" , \"plan_plan_id_has_usergroup_usergroup_id\" , \"mail_account\" , \"stream\" , \"user_otp_account\" , \"outbox_outbox_id_has_usergroup_usergroup_id\" , \"oauth_token_oauth_token_id_has_usergroup_usergroup_id\" , \"stream_stream_id_has_usergroup_usergroup_id\" , \"deployment_deployment_id_has_usergroup_usergroup_id\" , \"feed_feed_id_has_usergroup_usergroup_id\" , \"smd_smd_id_has_usergroup_usergroup_id\" , \"site_site_id_has_usergroup_usergroup_id\" , \"timeline_timeline_id_has_usergroup_usergroup_id\" , \"tab_eygurbe\" , \"screen_screen_id_has_usergroup_usergroup_id\" , \"mail_server\" , \"certificate\" , \"data_exchange\" , \"document_document_id_has_usergroup_usergroup_id\" , \"oauth_token\" , \"calendar_calendar_id_has_usergroup_usergroup_id\" , \"tab_nuqymzy\" , \"outbox\" , \"screen\" , \"integration_integration_id_has_usergroup_usergroup_id\" , \"oauth_connect\" , \"user_payment_user_payment_id_has_usergroup_usergroup_id\" , \"mail\" , \"world\" , \"mail_account_mail_account_id_has_usergroup_usergroup_id\" , \"mail_box\" , \"world_world_id_has_usergroup_usergroup_id\" , \"user_account_user_account_id_has_usergroup_usergroup_id\" , \"tab_nuqymzy_tab_nuqymzy_id_has_usergroup_usergroup_id\" , \"calendar\" , \"smd\" , \"user_payment\" , \"action\" , \"task\" , \"site\" , \"integration\" , \"starter_app_starter_app_id_has_usergroup_usergroup_id\" , \"plan\" , \"usergroup\" , \"tab_eygurbe_tab_eygurbe_id_has_usergroup_usergroup_id\" , \"deployment\" , \"starter_app\" , \"json_schema\" , \"user_otp_account_user_otp_account_id_has_usergroup_usergroup_id\" , \"feed\" , \"cloud_store_cloud_store_id_has_usergroup_usergroup_id\" , \"world_world_id_has_smd_smd_id\" , \"certificate_certificate_id_has_usergroup_usergroup_id\" , \"mail_mail_id_has_usergroup_usergroup_id\" , \"action_action_id_has_usergroup_usergroup_id\" , \"data_exchange_data_exchange_id_has_usergroup_usergroup_id\" , \"user_account\" , \"application_application_id_has_usergroup_usergroup_id\" , \"document\" , \"oauth_connect_oauth_connect_id_has_usergroup_usergroup_id\" , \"cloud_store\" , \"mail_server_mail_server_id_has_usergroup_usergroup_id\" , \"mail_box_mail_box_id_has_usergroup_usergroup_id\" ] } }","title":"List topics"},{"location":"websockets/websocket/#create-topic","text":"Create a new topic { \"method\" : \"create-topic\" , \"attributes\" : { \"name\" : \"<new_topic_name>\" } }","title":"Create topic"},{"location":"websockets/websocket/#destroy-topic","text":"Delete a user created topic { \"method\" : \"destroy-topic\" , \"attributes\" : { \"name\" : \"<topic_name>\" } }","title":"Destroy topic"},{"location":"websockets/websocket/#subscribe-topic","text":"Listen to create/update/delete events in any table { \"method\" : \"subscribe\" , \"attributes\" : { \"topic\" : \"user_account\" } } Create event sample payload { \"MessageSource\" : \"database\" , \"EventType\" : \"create\" , \"ObjectType\" : \"user_account\" , \"EventData\" : { \"__type\" : \"user_account\" , \"confirmed\" : false , \"created_at\" : \"2021-03-13T13:47:07.954634Z\" , \"email\" : \"asdf@asfd.cm\" , \"name\" : \"asdf\" , \"password\" : \"$2a$11$HbH5o1s6ThsMJ9ft/.uljO9.T.od/tR0RFtep50Ef5mzymI6kNlW.\" , \"permission\" : 2097057 , \"reference_id\" : \"004cc6b6-8b9b-4d51-936a-128133b21d04\" , \"updated_at\" : null , \"user_account_id\" : \"ee655e01-98a5-4761-bc93-b7a15e2b5847\" , \"version\" : 1 } } Update event sample payload { \"MessageSource\" : \"database\" , \"EventType\" : \"update\" , \"ObjectType\" : \"user_account\" , \"EventData\" : { \"__type\" : \"user_account\" , \"confirmed\" : false , \"created_at\" : \"2021-03-13T13:47:07.954634Z\" , \"email\" : \"asdf@asfd.cm\" , \"name\" : \"asdf\" , \"password\" : \"$2a$11$U83vQU5A3Xq2Gcphb52XOej8H9p1GbFKerpkoSesbx674qZfBjJdu\" , \"permission\" : 2097057 , \"reference_id\" : \"004cc6b6-8b9b-4d51-936a-128133b21d04\" , \"updated_at\" : \"2021-03-13T13:48:21.258962Z\" , \"user_account_id\" : \"ee655e01-98a5-4761-bc93-b7a15e2b5847\" , \"version\" : 2 } }","title":"Subscribe topic"},{"location":"websockets/websocket/#subscribe-with-filters","text":"{ \"method\" : \"subscribe\" , \"attributes\" : { \"topic\" : \"user_account\" , \"filters\" : { // f il ter o n t ype o f eve nt : crea te /upda te /dele te \"EventType\" : \"update\" , // f il ter o n colum n da ta , rows wi t h u n ma t ched colum n value will n o t be se nt \"<column_name>\" : \"<filter_value>\" } } }","title":"Subscribe with filters"},{"location":"websockets/websocket/#unsubscribe-topic","text":"Unsubscribe to an subscribed topic (this is required if you want to subscribe with new filters) { \"method\" : \"unsubscribe\" , \"attributes\" : { \"topic\" : \"<topic_name>\" } }","title":"Unsubscribe topic"},{"location":"websockets/websocket/#new-message-for-a-user-created-topic","text":"Send a message on a user created topic, broad-casted to all subscribers of this topic { \"method\" : \"new-message\" , \"attributes\" : { \"topic\" : \"test\" , \"message\" : { \"hello\" : \"world\" } } }","title":"New message for a user-created topic"}]}